// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Messages.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - MessagesRoot

@implementation MessagesRoot

@end

#pragma mark - MessagesRoot_FileDescriptor

static GPBFileDescriptor *MessagesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPBDebugCheckRuntimeVersion();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"push_server.messages"
                                                     syntax:GPBFileSyntaxProto2];
  }
  return descriptor;
}

#pragma mark - Enum CommandType

GPBEnumDescriptor *CommandType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Session", .number = CommandType_Session },
      { .name = "Conv", .number = CommandType_Conv },
      { .name = "Direct", .number = CommandType_Direct },
      { .name = "Ack", .number = CommandType_Ack },
      { .name = "Rcp", .number = CommandType_Rcp },
      { .name = "Unread", .number = CommandType_Unread },
      { .name = "Logs", .number = CommandType_Logs },
      { .name = "Error", .number = CommandType_Error },
      { .name = "Login", .number = CommandType_Login },
      { .name = "Data", .number = CommandType_Data },
      { .name = "Room", .number = CommandType_Room },
      { .name = "Read", .number = CommandType_Read },
    };
    static const char *extraTextFormatInfo = "\014\000\'\000\001$\000\002&\000\003#\000\004#\000\005&\000\006$\000\007%\000\010%\000\t$\000\n$\000\013$\000";
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CommandType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:CommandType_IsValidValue
                                      extraTextFormatInfo:extraTextFormatInfo];
  }
  return descriptor;
}

BOOL CommandType_IsValidValue(int32_t value__) {
  switch (value__) {
    case CommandType_Session:
    case CommandType_Conv:
    case CommandType_Direct:
    case CommandType_Ack:
    case CommandType_Rcp:
    case CommandType_Unread:
    case CommandType_Logs:
    case CommandType_Error:
    case CommandType_Login:
    case CommandType_Data:
    case CommandType_Room:
    case CommandType_Read:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum OpType

GPBEnumDescriptor *OpType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Open", .number = OpType_Open },
      { .name = "Add", .number = OpType_Add },
      { .name = "Remove", .number = OpType_Remove },
      { .name = "Close", .number = OpType_Close },
      { .name = "Opened", .number = OpType_Opened },
      { .name = "Closed", .number = OpType_Closed },
      { .name = "Query", .number = OpType_Query },
      { .name = "QueryResult", .number = OpType_QueryResult },
      { .name = "Conflict", .number = OpType_Conflict },
      { .name = "Added", .number = OpType_Added },
      { .name = "Removed", .number = OpType_Removed },
      { .name = "Start", .number = OpType_Start },
      { .name = "Started", .number = OpType_Started },
      { .name = "Joined", .number = OpType_Joined },
      { .name = "MembersJoined", .number = OpType_MembersJoined },
      { .name = "Left", .number = OpType_Left },
      { .name = "MembersLeft", .number = OpType_MembersLeft },
      { .name = "Results", .number = OpType_Results },
      { .name = "Count", .number = OpType_Count },
      { .name = "Result", .number = OpType_Result },
      { .name = "Update", .number = OpType_Update },
      { .name = "Updated", .number = OpType_Updated },
      { .name = "Mute", .number = OpType_Mute },
      { .name = "Unmute", .number = OpType_Unmute },
      { .name = "Join", .number = OpType_Join },
      { .name = "Invite", .number = OpType_Invite },
      { .name = "Leave", .number = OpType_Leave },
      { .name = "Kick", .number = OpType_Kick },
      { .name = "Reject", .number = OpType_Reject },
      { .name = "Invited", .number = OpType_Invited },
      { .name = "Kicked", .number = OpType_Kicked },
    };
    static const char *extraTextFormatInfo = "\037\000$\000\001#\000\002&\000\003%\000\004&\000\005&\000\006%\000\007%\246\000\010(\000\t%\000\n\'\000\013%\000\014\'\000\r&\000\016\'\246\000\017$\000\020\'\244\000\021\'\000\022%\000\023&\000\024&\000\025\'\000\026$\000\027&\000\030$\000\031&\000\032%\000\033$\000\034&\000\035\'\000\036&\000";
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(OpType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:OpType_IsValidValue
                                      extraTextFormatInfo:extraTextFormatInfo];
  }
  return descriptor;
}

BOOL OpType_IsValidValue(int32_t value__) {
  switch (value__) {
    case OpType_Open:
    case OpType_Add:
    case OpType_Remove:
    case OpType_Close:
    case OpType_Opened:
    case OpType_Closed:
    case OpType_Query:
    case OpType_QueryResult:
    case OpType_Conflict:
    case OpType_Added:
    case OpType_Removed:
    case OpType_Start:
    case OpType_Started:
    case OpType_Joined:
    case OpType_MembersJoined:
    case OpType_Left:
    case OpType_MembersLeft:
    case OpType_Results:
    case OpType_Count:
    case OpType_Result:
    case OpType_Update:
    case OpType_Updated:
    case OpType_Mute:
    case OpType_Unmute:
    case OpType_Join:
    case OpType_Invite:
    case OpType_Leave:
    case OpType_Kick:
    case OpType_Reject:
    case OpType_Invited:
    case OpType_Kicked:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - JsonObjectMessage

@implementation JsonObjectMessage

@dynamic hasData_p, data_p;

typedef struct JsonObjectMessage__storage_ {
  uint32_t _has_storage_[1];
  __unsafe_unretained NSString *data_p;
} JsonObjectMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .number = JsonObjectMessage_FieldNumber_Data_p,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(JsonObjectMessage__storage_, data_p),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JsonObjectMessage class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(JsonObjectMessage__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnreadTuple

@implementation UnreadTuple

@dynamic hasCid, cid;
@dynamic hasUnread, unread;

typedef struct UnreadTuple__storage_ {
  uint32_t _has_storage_[1];
  int32_t unread;
  __unsafe_unretained NSString *cid;
} UnreadTuple__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cid",
        .number = UnreadTuple_FieldNumber_Cid,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(UnreadTuple__storage_, cid),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "unread",
        .number = UnreadTuple_FieldNumber_Unread,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(UnreadTuple__storage_, unread),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnreadTuple class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UnreadTuple__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogItem

@implementation LogItem

@dynamic hasFrom, from;
@dynamic hasData_p, data_p;
@dynamic hasTimestamp, timestamp;
@dynamic hasMsgId, msgId;

typedef struct LogItem__storage_ {
  uint32_t _has_storage_[1];
 __unsafe_unretained NSString *from;
 __unsafe_unretained NSString *data_p;
 __unsafe_unretained NSString *msgId;
  int64_t timestamp;
} LogItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "from",
        .number = LogItem_FieldNumber_From,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(LogItem__storage_, from),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "data_p",
        .number = LogItem_FieldNumber_Data_p,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(LogItem__storage_, data_p),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "timestamp",
        .number = LogItem_FieldNumber_Timestamp,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(LogItem__storage_, timestamp),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "msgId",
        .number = LogItem_FieldNumber_MsgId,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(LogItem__storage_, msgId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\004\005\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogItem class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(LogItem__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LoginCommand

@implementation LoginCommand


typedef struct LoginCommand__storage_ {
  uint32_t _has_storage_[0];
} LoginCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(LoginCommand__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DataCommand

@implementation DataCommand

@dynamic idsArray, idsArray_Count;
@dynamic msgArray, msgArray_Count;

typedef struct DataCommand__storage_ {
  uint32_t _has_storage_[1];
 __unsafe_unretained NSMutableArray *idsArray;
  __unsafe_unretained NSMutableArray *msgArray;
} DataCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "idsArray",
        .number = DataCommand_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DataCommand__storage_, idsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "msgArray",
        .number = DataCommand_FieldNumber_MsgArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DataCommand__storage_, msgArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DataCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DataCommand__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SessionCommand

@implementation SessionCommand

@dynamic hasT, t;
@dynamic hasN, n;
@dynamic hasS, s;
@dynamic hasUa, ua;
@dynamic hasR, r;
@dynamic hasTag, tag;
@dynamic hasDeviceId, deviceId;
@dynamic sessionPeerIdsArray, sessionPeerIdsArray_Count;
@dynamic onlineSessionPeerIdsArray, onlineSessionPeerIdsArray_Count;
@dynamic hasSt, st;
@dynamic hasStTtl, stTtl;
@dynamic hasCode, code;
@dynamic hasReason, reason;

typedef struct SessionCommand__storage_ {
  uint32_t _has_storage_[1];
  BOOL r;
  int32_t code;
 __unsafe_unretained NSString *n;
  __unsafe_unretained NSString *s;
  __unsafe_unretained NSString *ua;
  __unsafe_unretained NSString *tag;
  __unsafe_unretained NSString *deviceId;
  __unsafe_unretained NSMutableArray *sessionPeerIdsArray;
  __unsafe_unretained NSMutableArray *onlineSessionPeerIdsArray;
  __unsafe_unretained NSString *st;
  __unsafe_unretained NSString *stTtl;
  __unsafe_unretained NSString *reason;
  int64_t t;
} SessionCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "t",
        .number = SessionCommand_FieldNumber_T,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(SessionCommand__storage_, t),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "n",
        .number = SessionCommand_FieldNumber_N,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SessionCommand__storage_, n),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "s",
        .number = SessionCommand_FieldNumber_S,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SessionCommand__storage_, s),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "ua",
        .number = SessionCommand_FieldNumber_Ua,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SessionCommand__storage_, ua),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "r",
        .number = SessionCommand_FieldNumber_R,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(SessionCommand__storage_, r),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "tag",
        .number = SessionCommand_FieldNumber_Tag,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SessionCommand__storage_, tag),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "deviceId",
        .number = SessionCommand_FieldNumber_DeviceId,
        .hasIndex = 6,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SessionCommand__storage_, deviceId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "sessionPeerIdsArray",
        .number = SessionCommand_FieldNumber_SessionPeerIdsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SessionCommand__storage_, sessionPeerIdsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "onlineSessionPeerIdsArray",
        .number = SessionCommand_FieldNumber_OnlineSessionPeerIdsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SessionCommand__storage_, onlineSessionPeerIdsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "st",
        .number = SessionCommand_FieldNumber_St,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SessionCommand__storage_, st),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "stTtl",
        .number = SessionCommand_FieldNumber_StTtl,
        .hasIndex = 10,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SessionCommand__storage_, stTtl),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "code",
        .number = SessionCommand_FieldNumber_Code,
        .hasIndex = 11,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(SessionCommand__storage_, code),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "reason",
        .number = SessionCommand_FieldNumber_Reason,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(SessionCommand__storage_, reason),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\004\007\010\000\010\000sessionPeerIds\000\t\000onlineSessionPeerIds\000\013\005\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SessionCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(SessionCommand__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ErrorCommand

@implementation ErrorCommand

@dynamic hasCode, code;
@dynamic hasReason, reason;
@dynamic hasAppCode, appCode;

typedef struct ErrorCommand__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  int32_t appCode;
  __unsafe_unretained NSString *reason;
} ErrorCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .number = ErrorCommand_FieldNumber_Code,
        .hasIndex = 0,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ErrorCommand__storage_, code),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "reason",
        .number = ErrorCommand_FieldNumber_Reason,
        .hasIndex = 1,
        .flags = GPBFieldRequired,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ErrorCommand__storage_, reason),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "appCode",
        .number = ErrorCommand_FieldNumber_AppCode,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ErrorCommand__storage_, appCode),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\003\007\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ErrorCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ErrorCommand__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DirectCommand

@implementation DirectCommand

@dynamic hasMsg, msg;
@dynamic hasUid, uid;
@dynamic hasFromPeerId, fromPeerId;
@dynamic hasTimestamp, timestamp;
@dynamic hasOffline, offline;
@dynamic hasHasMore, hasMore;
@dynamic toPeerIdsArray, toPeerIdsArray_Count;
@dynamic hasR, r;
@dynamic hasCid, cid;
@dynamic hasId_p, id_p;
@dynamic hasTransient, transient;
@dynamic hasDt, dt;

typedef struct DirectCommand__storage_ {
  uint32_t _has_storage_[1];
  BOOL offline;
  BOOL hasMore;
  BOOL r;
  BOOL transient;
  __unsafe_unretained NSString *msg;
  __unsafe_unretained NSString *uid;
  __unsafe_unretained NSString *fromPeerId;
  __unsafe_unretained NSMutableArray *toPeerIdsArray;
  __unsafe_unretained NSString *cid;
  __unsafe_unretained NSString *id_p;
  __unsafe_unretained NSString *dt;
   int64_t timestamp;
} DirectCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "msg",
        .number = DirectCommand_FieldNumber_Msg,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DirectCommand__storage_, msg),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "uid",
        .number = DirectCommand_FieldNumber_Uid,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DirectCommand__storage_, uid),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "fromPeerId",
        .number = DirectCommand_FieldNumber_FromPeerId,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DirectCommand__storage_, fromPeerId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "timestamp",
        .number = DirectCommand_FieldNumber_Timestamp,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(DirectCommand__storage_, timestamp),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "offline",
        .number = DirectCommand_FieldNumber_Offline,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(DirectCommand__storage_, offline),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "hasMore",
        .number = DirectCommand_FieldNumber_HasMore,
        .hasIndex = 5,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(DirectCommand__storage_, hasMore),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "toPeerIdsArray",
        .number = DirectCommand_FieldNumber_ToPeerIdsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DirectCommand__storage_, toPeerIdsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "r",
        .number = DirectCommand_FieldNumber_R,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(DirectCommand__storage_, r),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "cid",
        .number = DirectCommand_FieldNumber_Cid,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DirectCommand__storage_, cid),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "id_p",
        .number = DirectCommand_FieldNumber_Id_p,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DirectCommand__storage_, id_p),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "transient",
        .number = DirectCommand_FieldNumber_Transient,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(DirectCommand__storage_, transient),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "dt",
        .number = DirectCommand_FieldNumber_Dt,
        .hasIndex = 11,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(DirectCommand__storage_, dt),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\003\003\n\000\006\007\000\007\000toPeerIds\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DirectCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(DirectCommand__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AckCommand

@implementation AckCommand

@dynamic hasCode, code;
@dynamic hasReason, reason;
@dynamic hasMid, mid;
@dynamic hasCid, cid;
@dynamic hasTimestamp, timestamp;
@dynamic hasUid, uid;
@dynamic hasFromts, fromts;
@dynamic hasTots, tots;
@dynamic hasType, type;
@dynamic idsArray, idsArray_Count;

typedef struct AckCommand__storage_ {
  uint32_t _has_storage_[1];
  int32_t code;
  __unsafe_unretained NSString *reason;
  __unsafe_unretained NSString *mid;
  __unsafe_unretained NSString *cid;
  __unsafe_unretained NSString *uid;
  __unsafe_unretained NSString *type;
  __unsafe_unretained NSMutableArray *idsArray;
  int64_t timestamp;
  int64_t fromts;
  int64_t tots;
} AckCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .number = AckCommand_FieldNumber_Code,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(AckCommand__storage_, code),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "reason",
        .number = AckCommand_FieldNumber_Reason,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AckCommand__storage_, reason),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "mid",
        .number = AckCommand_FieldNumber_Mid,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AckCommand__storage_, mid),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "cid",
        .number = AckCommand_FieldNumber_Cid,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AckCommand__storage_, cid),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "timestamp",
        .number = AckCommand_FieldNumber_Timestamp,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(AckCommand__storage_, timestamp),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "uid",
        .number = AckCommand_FieldNumber_Uid,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AckCommand__storage_, uid),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "fromts",
        .number = AckCommand_FieldNumber_Fromts,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(AckCommand__storage_, fromts),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "tots",
        .number = AckCommand_FieldNumber_Tots,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(AckCommand__storage_, tots),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "type",
        .number = AckCommand_FieldNumber_Type,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AckCommand__storage_, type),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "idsArray",
        .number = AckCommand_FieldNumber_IdsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(AckCommand__storage_, idsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AckCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(AckCommand__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UnreadCommand

@implementation UnreadCommand

@dynamic convsArray, convsArray_Count;

typedef struct UnreadCommand__storage_ {
  uint32_t _has_storage_[1];
  __unsafe_unretained NSMutableArray *convsArray;
} UnreadCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "convsArray",
        .number = UnreadCommand_FieldNumber_ConvsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(UnreadCommand__storage_, convsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UnreadTuple),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnreadCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(UnreadCommand__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ConvCommand

@implementation ConvCommand

@dynamic mArray, mArray_Count;
@dynamic hasTransient, transient;
@dynamic hasUnique, unique;
@dynamic hasCid, cid;
@dynamic hasCdate, cdate;
@dynamic hasInitBy, initBy;
@dynamic hasSort, sort;
@dynamic hasLimit, limit;
@dynamic hasSkip, skip;
@dynamic hasFlag, flag;
@dynamic hasCount, count;
@dynamic hasUdate, udate;
@dynamic hasT, t;
@dynamic hasN, n;
@dynamic hasS, s;
@dynamic hasResults, results;
@dynamic hasWhere, where;
@dynamic hasAttr, attr;

typedef struct ConvCommand__storage_ {
  uint32_t _has_storage_[1];
  BOOL transient;
  BOOL unique;
  int32_t limit;
  int32_t skip;
  int32_t flag;
  int32_t count;
  __unsafe_unretained NSMutableArray *mArray;
  __unsafe_unretained NSString *cid;
  __unsafe_unretained NSString *cdate;
  __unsafe_unretained NSString *initBy;
  __unsafe_unretained NSString *sort;
  __unsafe_unretained NSString *udate;
  __unsafe_unretained NSString *n;
  __unsafe_unretained NSString *s;
  __unsafe_unretained JsonObjectMessage *results;
  __unsafe_unretained JsonObjectMessage *where;
  __unsafe_unretained JsonObjectMessage *attr;
  int64_t t;
} ConvCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mArray",
        .number = ConvCommand_FieldNumber_MArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ConvCommand__storage_, mArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "transient",
        .number = ConvCommand_FieldNumber_Transient,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(ConvCommand__storage_, transient),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "unique",
        .number = ConvCommand_FieldNumber_Unique,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(ConvCommand__storage_, unique),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "cid",
        .number = ConvCommand_FieldNumber_Cid,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ConvCommand__storage_, cid),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "cdate",
        .number = ConvCommand_FieldNumber_Cdate,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ConvCommand__storage_, cdate),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "initBy",
        .number = ConvCommand_FieldNumber_InitBy,
        .hasIndex = 5,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ConvCommand__storage_, initBy),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "sort",
        .number = ConvCommand_FieldNumber_Sort,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ConvCommand__storage_, sort),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "limit",
        .number = ConvCommand_FieldNumber_Limit,
        .hasIndex = 7,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ConvCommand__storage_, limit),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "skip",
        .number = ConvCommand_FieldNumber_Skip,
        .hasIndex = 8,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ConvCommand__storage_, skip),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "flag",
        .number = ConvCommand_FieldNumber_Flag,
        .hasIndex = 9,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ConvCommand__storage_, flag),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "count",
        .number = ConvCommand_FieldNumber_Count,
        .hasIndex = 10,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(ConvCommand__storage_, count),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "udate",
        .number = ConvCommand_FieldNumber_Udate,
        .hasIndex = 11,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ConvCommand__storage_, udate),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "t",
        .number = ConvCommand_FieldNumber_T,
        .hasIndex = 12,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(ConvCommand__storage_, t),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "n",
        .number = ConvCommand_FieldNumber_N,
        .hasIndex = 13,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ConvCommand__storage_, n),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "s",
        .number = ConvCommand_FieldNumber_S,
        .hasIndex = 14,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ConvCommand__storage_, s),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "results",
        .number = ConvCommand_FieldNumber_Results,
        .hasIndex = 15,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ConvCommand__storage_, results),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(JsonObjectMessage),
        .fieldOptions = NULL,
      },
      {
        .name = "where",
        .number = ConvCommand_FieldNumber_Where,
        .hasIndex = 16,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ConvCommand__storage_, where),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(JsonObjectMessage),
        .fieldOptions = NULL,
      },
      {
        .name = "attr",
        .number = ConvCommand_FieldNumber_Attr,
        .hasIndex = 17,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(ConvCommand__storage_, attr),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(JsonObjectMessage),
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\006\006\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ConvCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ConvCommand__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RoomCommand

@implementation RoomCommand

@dynamic hasRoomId, roomId;
@dynamic hasS, s;
@dynamic hasT, t;
@dynamic hasN, n;
@dynamic hasTransient, transient;
@dynamic roomPeerIdsArray, roomPeerIdsArray_Count;

typedef struct RoomCommand__storage_ {
  uint32_t _has_storage_[1];
  BOOL transient;
  __unsafe_unretained NSString *roomId;
  __unsafe_unretained NSString *s;
  __unsafe_unretained NSString *n;
  __unsafe_unretained NSMutableArray *roomPeerIdsArray;
  int64_t t;
} RoomCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "roomId",
        .number = RoomCommand_FieldNumber_RoomId,
        .hasIndex = 0,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RoomCommand__storage_, roomId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "s",
        .number = RoomCommand_FieldNumber_S,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RoomCommand__storage_, s),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "t",
        .number = RoomCommand_FieldNumber_T,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(RoomCommand__storage_, t),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "n",
        .number = RoomCommand_FieldNumber_N,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RoomCommand__storage_, n),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "transient",
        .number = RoomCommand_FieldNumber_Transient,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
        .offset = offsetof(RoomCommand__storage_, transient),
        .defaultValue.valueBool = NO,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "roomPeerIdsArray",
        .number = RoomCommand_FieldNumber_RoomPeerIdsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RoomCommand__storage_, roomPeerIdsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\002\001\006\000\006\000roomPeerIds\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RoomCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RoomCommand__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LogsCommand

@implementation LogsCommand

@dynamic hasCid, cid;
@dynamic hasL, l;
@dynamic hasLimit, limit;
@dynamic hasT, t;
@dynamic hasTt, tt;
@dynamic hasTmid, tmid;
@dynamic hasMid, mid;
@dynamic logsArray, logsArray_Count;

typedef struct LogsCommand__storage_ {
  uint32_t _has_storage_[1];
  int32_t l;
  int32_t limit;
  __unsafe_unretained NSString *cid;
  __unsafe_unretained NSString *tmid;
  __unsafe_unretained NSString *mid;
  __unsafe_unretained NSMutableArray *logsArray;
  int64_t t;
  int64_t tt;
} LogsCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cid",
        .number = LogsCommand_FieldNumber_Cid,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(LogsCommand__storage_, cid),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "l",
        .number = LogsCommand_FieldNumber_L,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(LogsCommand__storage_, l),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "limit",
        .number = LogsCommand_FieldNumber_Limit,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(LogsCommand__storage_, limit),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "t",
        .number = LogsCommand_FieldNumber_T,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(LogsCommand__storage_, t),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "tt",
        .number = LogsCommand_FieldNumber_Tt,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(LogsCommand__storage_, tt),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "tmid",
        .number = LogsCommand_FieldNumber_Tmid,
        .hasIndex = 5,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(LogsCommand__storage_, tmid),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "mid",
        .number = LogsCommand_FieldNumber_Mid,
        .hasIndex = 6,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(LogsCommand__storage_, mid),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "logsArray",
        .number = LogsCommand_FieldNumber_LogsArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(LogsCommand__storage_, logsArray),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(LogItem),
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LogsCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(LogsCommand__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RcpCommand

@implementation RcpCommand

@dynamic hasId_p, id_p;
@dynamic hasCid, cid;
@dynamic hasT, t;

typedef struct RcpCommand__storage_ {
  uint32_t _has_storage_[1];
  __unsafe_unretained NSString *id_p;
  __unsafe_unretained NSString *cid;
  int64_t t;
} RcpCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .number = RcpCommand_FieldNumber_Id_p,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RcpCommand__storage_, id_p),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "cid",
        .number = RcpCommand_FieldNumber_Cid,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(RcpCommand__storage_, cid),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "t",
        .number = RcpCommand_FieldNumber_T,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
        .offset = offsetof(RcpCommand__storage_, t),
        .defaultValue.valueInt64 = 0LL,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RcpCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(RcpCommand__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReadCommand

@implementation ReadCommand

@dynamic hasCid, cid;

typedef struct ReadCommand__storage_ {
  uint32_t _has_storage_[1];
  __unsafe_unretained NSString *cid;
} ReadCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cid",
        .number = ReadCommand_FieldNumber_Cid,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
        .offset = offsetof(ReadCommand__storage_, cid),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReadCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(ReadCommand__storage_)
                                    wireFormat:NO];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GenericCommand

@implementation GenericCommand

@dynamic hasCmd, cmd;
@dynamic hasOp, op;
@dynamic hasAppId, appId;
@dynamic hasPeerId, peerId;
@dynamic hasI, i;
@dynamic hasInstallationId, installationId;
@dynamic hasLoginMessage, loginMessage;
@dynamic hasDataMessage, dataMessage;
@dynamic hasSessionMessage, sessionMessage;
@dynamic hasErrorMessage, errorMessage;
@dynamic hasDirectMessage, directMessage;
@dynamic hasAckMessage, ackMessage;
@dynamic hasUnreadMessage, unreadMessage;
@dynamic hasReadMessage, readMessage;
@dynamic hasRcpMessage, rcpMessage;
@dynamic hasLogsMessage, logsMessage;
@dynamic hasConvMessage, convMessage;
@dynamic hasRoomMessage, roomMessage;

typedef struct GenericCommand__storage_ {
  uint32_t _has_storage_[1];
  CommandType cmd;
  OpType op;
  int32_t i;
  __unsafe_unretained NSString *appId;
  __unsafe_unretained NSString *peerId;
  __unsafe_unretained NSString *installationId;
  __unsafe_unretained LoginCommand *loginMessage;
  __unsafe_unretained DataCommand *dataMessage;
  __unsafe_unretained SessionCommand *sessionMessage;
  __unsafe_unretained ErrorCommand *errorMessage;
  __unsafe_unretained DirectCommand *directMessage;
  __unsafe_unretained AckCommand *ackMessage;
  __unsafe_unretained UnreadCommand *unreadMessage;
  __unsafe_unretained ReadCommand *readMessage;
  __unsafe_unretained RcpCommand *rcpMessage;
  __unsafe_unretained LogsCommand *logsMessage;
  __unsafe_unretained ConvCommand *convMessage;
  __unsafe_unretained RoomCommand *roomMessage;
} GenericCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "cmd",
        .number = GenericCommand_FieldNumber_Cmd,
        .hasIndex = 0,
        .flags = GPBFieldRequired | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(GenericCommand__storage_, cmd),
        .defaultValue.valueEnum = CommandType_Session,
        .dataTypeSpecific.enumDescFunc = CommandType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "op",
        .number = GenericCommand_FieldNumber_Op,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .dataType = GPBDataTypeEnum,
        .offset = offsetof(GenericCommand__storage_, op),
        .defaultValue.valueEnum = OpType_Open,
        .dataTypeSpecific.enumDescFunc = OpType_EnumDescriptor,
        .fieldOptions = NULL,
      },
      {
        .name = "appId",
        .number = GenericCommand_FieldNumber_AppId,
        .hasIndex = 2,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GenericCommand__storage_, appId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "peerId",
        .number = GenericCommand_FieldNumber_PeerId,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GenericCommand__storage_, peerId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "i",
        .number = GenericCommand_FieldNumber_I,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
        .offset = offsetof(GenericCommand__storage_, i),
        .defaultValue.valueInt32 = 0,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "installationId",
        .number = GenericCommand_FieldNumber_InstallationId,
        .hasIndex = 5,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeString,
        .offset = offsetof(GenericCommand__storage_, installationId),
        .defaultValue.valueString = nil,
        .dataTypeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "loginMessage",
        .number = GenericCommand_FieldNumber_LoginMessage,
        .hasIndex = 6,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GenericCommand__storage_, loginMessage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(LoginCommand),
        .fieldOptions = NULL,
      },
      {
        .name = "dataMessage",
        .number = GenericCommand_FieldNumber_DataMessage,
        .hasIndex = 7,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GenericCommand__storage_, dataMessage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DataCommand),
        .fieldOptions = NULL,
      },
      {
        .name = "sessionMessage",
        .number = GenericCommand_FieldNumber_SessionMessage,
        .hasIndex = 8,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GenericCommand__storage_, sessionMessage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(SessionCommand),
        .fieldOptions = NULL,
      },
      {
        .name = "errorMessage",
        .number = GenericCommand_FieldNumber_ErrorMessage,
        .hasIndex = 9,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GenericCommand__storage_, errorMessage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ErrorCommand),
        .fieldOptions = NULL,
      },
      {
        .name = "directMessage",
        .number = GenericCommand_FieldNumber_DirectMessage,
        .hasIndex = 10,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GenericCommand__storage_, directMessage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(DirectCommand),
        .fieldOptions = NULL,
      },
      {
        .name = "ackMessage",
        .number = GenericCommand_FieldNumber_AckMessage,
        .hasIndex = 11,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GenericCommand__storage_, ackMessage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(AckCommand),
        .fieldOptions = NULL,
      },
      {
        .name = "unreadMessage",
        .number = GenericCommand_FieldNumber_UnreadMessage,
        .hasIndex = 12,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GenericCommand__storage_, unreadMessage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(UnreadCommand),
        .fieldOptions = NULL,
      },
      {
        .name = "readMessage",
        .number = GenericCommand_FieldNumber_ReadMessage,
        .hasIndex = 13,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GenericCommand__storage_, readMessage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ReadCommand),
        .fieldOptions = NULL,
      },
      {
        .name = "rcpMessage",
        .number = GenericCommand_FieldNumber_RcpMessage,
        .hasIndex = 14,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GenericCommand__storage_, rcpMessage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(RcpCommand),
        .fieldOptions = NULL,
      },
      {
        .name = "logsMessage",
        .number = GenericCommand_FieldNumber_LogsMessage,
        .hasIndex = 15,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GenericCommand__storage_, logsMessage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(LogsCommand),
        .fieldOptions = NULL,
      },
      {
        .name = "convMessage",
        .number = GenericCommand_FieldNumber_ConvMessage,
        .hasIndex = 16,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GenericCommand__storage_, convMessage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(ConvCommand),
        .fieldOptions = NULL,
      },
      {
        .name = "roomMessage",
        .number = GenericCommand_FieldNumber_RoomMessage,
        .hasIndex = 17,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .dataType = GPBDataTypeMessage,
        .offset = offsetof(GenericCommand__storage_, roomMessage),
        .defaultValue.valueMessage = nil,
        .dataTypeSpecific.className = GPBStringifySymbol(RoomCommand),
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\017\003\005\000\004\006\000\006\016\000d\014\000e\013\000f\016\000g\014\000h\r\000i\n\000j\r\000k\013\000l\n\000m\013\000n\013\000o\013\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GenericCommand class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                        oneofs:NULL
                                    oneofCount:0
                                         enums:NULL
                                     enumCount:0
                                        ranges:NULL
                                    rangeCount:0
                                   storageSize:sizeof(GenericCommand__storage_)
                                    wireFormat:NO
                           extraTextFormatInfo:extraTextFormatInfo];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
