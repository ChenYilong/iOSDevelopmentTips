// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Messages.pb.h"
// @@protoc_insertion_point(imports)

@implementation MessagesRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [MessagesRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

BOOL CommandTypeIsValidValue(CommandType value) {
  switch (value) {
    case CommandTypeSession:
    case CommandTypeConv:
    case CommandTypeDirect:
    case CommandTypeAck:
    case CommandTypeRcp:
    case CommandTypeUnread:
    case CommandTypeLogs:
    case CommandTypeError:
    case CommandTypeLogin:
    case CommandTypeData:
    case CommandTypeRoom:
    case CommandTypeRead:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromCommandType(CommandType value) {
  switch (value) {
    case CommandTypeSession:
      return @"CommandTypeSession";
    case CommandTypeConv:
      return @"CommandTypeConv";
    case CommandTypeDirect:
      return @"CommandTypeDirect";
    case CommandTypeAck:
      return @"CommandTypeAck";
    case CommandTypeRcp:
      return @"CommandTypeRcp";
    case CommandTypeUnread:
      return @"CommandTypeUnread";
    case CommandTypeLogs:
      return @"CommandTypeLogs";
    case CommandTypeError:
      return @"CommandTypeError";
    case CommandTypeLogin:
      return @"CommandTypeLogin";
    case CommandTypeData:
      return @"CommandTypeData";
    case CommandTypeRoom:
      return @"CommandTypeRoom";
    case CommandTypeRead:
      return @"CommandTypeRead";
    default:
      return nil;
  }
}

BOOL OpTypeIsValidValue(OpType value) {
  switch (value) {
    case OpTypeOpen:
    case OpTypeAdd:
    case OpTypeRemove:
    case OpTypeClose:
    case OpTypeOpened:
    case OpTypeClosed:
    case OpTypeQuery:
    case OpTypeQueryResult:
    case OpTypeConflict:
    case OpTypeAdded:
    case OpTypeRemoved:
    case OpTypeStart:
    case OpTypeStarted:
    case OpTypeJoined:
    case OpTypeMembersJoined:
    case OpTypeLeft:
    case OpTypeMembersLeft:
    case OpTypeResults:
    case OpTypeCount:
    case OpTypeResult:
    case OpTypeUpdate:
    case OpTypeUpdated:
    case OpTypeMute:
    case OpTypeUnmute:
    case OpTypeJoin:
    case OpTypeInvite:
    case OpTypeLeave:
    case OpTypeKick:
    case OpTypeReject:
    case OpTypeInvited:
    case OpTypeKicked:
      return YES;
    default:
      return NO;
  }
}
NSString *NSStringFromOpType(OpType value) {
  switch (value) {
    case OpTypeOpen:
      return @"OpTypeOpen";
    case OpTypeAdd:
      return @"OpTypeAdd";
    case OpTypeRemove:
      return @"OpTypeRemove";
    case OpTypeClose:
      return @"OpTypeClose";
    case OpTypeOpened:
      return @"OpTypeOpened";
    case OpTypeClosed:
      return @"OpTypeClosed";
    case OpTypeQuery:
      return @"OpTypeQuery";
    case OpTypeQueryResult:
      return @"OpTypeQueryResult";
    case OpTypeConflict:
      return @"OpTypeConflict";
    case OpTypeAdded:
      return @"OpTypeAdded";
    case OpTypeRemoved:
      return @"OpTypeRemoved";
    case OpTypeStart:
      return @"OpTypeStart";
    case OpTypeStarted:
      return @"OpTypeStarted";
    case OpTypeJoined:
      return @"OpTypeJoined";
    case OpTypeMembersJoined:
      return @"OpTypeMembersJoined";
    case OpTypeLeft:
      return @"OpTypeLeft";
    case OpTypeMembersLeft:
      return @"OpTypeMembersLeft";
    case OpTypeResults:
      return @"OpTypeResults";
    case OpTypeCount:
      return @"OpTypeCount";
    case OpTypeResult:
      return @"OpTypeResult";
    case OpTypeUpdate:
      return @"OpTypeUpdate";
    case OpTypeUpdated:
      return @"OpTypeUpdated";
    case OpTypeMute:
      return @"OpTypeMute";
    case OpTypeUnmute:
      return @"OpTypeUnmute";
    case OpTypeJoin:
      return @"OpTypeJoin";
    case OpTypeInvite:
      return @"OpTypeInvite";
    case OpTypeLeave:
      return @"OpTypeLeave";
    case OpTypeKick:
      return @"OpTypeKick";
    case OpTypeReject:
      return @"OpTypeReject";
    case OpTypeInvited:
      return @"OpTypeInvited";
    case OpTypeKicked:
      return @"OpTypeKicked";
    default:
      return nil;
  }
}

@interface JsonObjectMessage ()
@property (strong) NSString* data;
@end

@implementation JsonObjectMessage

- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (instancetype) init {
  if ((self = [super init])) {
    self.data = @"";
  }
  return self;
}
static JsonObjectMessage* defaultJsonObjectMessageInstance = nil;
+ (void) initialize {
  if (self == [JsonObjectMessage class]) {
    defaultJsonObjectMessageInstance = [[JsonObjectMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultJsonObjectMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultJsonObjectMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasData) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasData) {
    [output writeString:1 value:self.data];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasData) {
    size_ += computeStringSize(1, self.data);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (JsonObjectMessage*) parseFromData:(NSData*) data {
  return (JsonObjectMessage*)[[[JsonObjectMessage builder] mergeFromData:data] build];
}
+ (JsonObjectMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JsonObjectMessage*)[[[JsonObjectMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (JsonObjectMessage*) parseFromInputStream:(NSInputStream*) input {
  return (JsonObjectMessage*)[[[JsonObjectMessage builder] mergeFromInputStream:input] build];
}
+ (JsonObjectMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JsonObjectMessage*)[[[JsonObjectMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JsonObjectMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (JsonObjectMessage*)[[[JsonObjectMessage builder] mergeFromCodedInputStream:input] build];
}
+ (JsonObjectMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (JsonObjectMessage*)[[[JsonObjectMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (JsonObjectMessageBuilder*) builder {
  return [[JsonObjectMessageBuilder alloc] init];
}
+ (JsonObjectMessageBuilder*) builderWithPrototype:(JsonObjectMessage*) prototype {
  return [[JsonObjectMessage builder] mergeFrom:prototype];
}
- (JsonObjectMessageBuilder*) builder {
  return [JsonObjectMessage builder];
}
- (JsonObjectMessageBuilder*) toBuilder {
  return [JsonObjectMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[JsonObjectMessage class]]) {
    return NO;
  }
  JsonObjectMessage *otherMessage = other;
  return
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface JsonObjectMessageBuilder()
@property (strong) JsonObjectMessage* resultJsonObjectMessage;
@end

@implementation JsonObjectMessageBuilder
@synthesize resultJsonObjectMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultJsonObjectMessage = [[JsonObjectMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultJsonObjectMessage;
}
- (JsonObjectMessageBuilder*) clear {
  self.resultJsonObjectMessage = [[JsonObjectMessage alloc] init];
  return self;
}
- (JsonObjectMessageBuilder*) clone {
  return [JsonObjectMessage builderWithPrototype:resultJsonObjectMessage];
}
- (JsonObjectMessage*) defaultInstance {
  return [JsonObjectMessage defaultInstance];
}
- (JsonObjectMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (JsonObjectMessage*) buildPartial {
  JsonObjectMessage* returnMe = resultJsonObjectMessage;
  self.resultJsonObjectMessage = nil;
  return returnMe;
}
- (JsonObjectMessageBuilder*) mergeFrom:(JsonObjectMessage*) other {
  if (other == [JsonObjectMessage defaultInstance]) {
    return self;
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (JsonObjectMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (JsonObjectMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setData:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasData {
  return resultJsonObjectMessage.hasData;
}
- (NSString*) data {
  return resultJsonObjectMessage.data;
}
- (JsonObjectMessageBuilder*) setData:(NSString*) value {
  resultJsonObjectMessage.hasData = YES;
  resultJsonObjectMessage.data = value;
  return self;
}
- (JsonObjectMessageBuilder*) clearData {
  resultJsonObjectMessage.hasData = NO;
  resultJsonObjectMessage.data = @"";
  return self;
}
@end

@interface UnreadTuple ()
@property (strong) NSString* cid;
@property SInt32 unread;
@end

@implementation UnreadTuple

- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasUnread {
  return !!hasUnread_;
}
- (void) setHasUnread:(BOOL) _value_ {
  hasUnread_ = !!_value_;
}
@synthesize unread;
- (instancetype) init {
  if ((self = [super init])) {
    self.cid = @"";
    self.unread = 0;
  }
  return self;
}
static UnreadTuple* defaultUnreadTupleInstance = nil;
+ (void) initialize {
  if (self == [UnreadTuple class]) {
    defaultUnreadTupleInstance = [[UnreadTuple alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUnreadTupleInstance;
}
- (instancetype) defaultInstance {
  return defaultUnreadTupleInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCid) {
    return NO;
  }
  if (!self.hasUnread) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCid) {
    [output writeString:1 value:self.cid];
  }
  if (self.hasUnread) {
    [output writeInt32:2 value:self.unread];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCid) {
    size_ += computeStringSize(1, self.cid);
  }
  if (self.hasUnread) {
    size_ += computeInt32Size(2, self.unread);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UnreadTuple*) parseFromData:(NSData*) data {
  return (UnreadTuple*)[[[UnreadTuple builder] mergeFromData:data] build];
}
+ (UnreadTuple*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnreadTuple*)[[[UnreadTuple builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UnreadTuple*) parseFromInputStream:(NSInputStream*) input {
  return (UnreadTuple*)[[[UnreadTuple builder] mergeFromInputStream:input] build];
}
+ (UnreadTuple*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnreadTuple*)[[[UnreadTuple builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnreadTuple*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UnreadTuple*)[[[UnreadTuple builder] mergeFromCodedInputStream:input] build];
}
+ (UnreadTuple*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnreadTuple*)[[[UnreadTuple builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnreadTupleBuilder*) builder {
  return [[UnreadTupleBuilder alloc] init];
}
+ (UnreadTupleBuilder*) builderWithPrototype:(UnreadTuple*) prototype {
  return [[UnreadTuple builder] mergeFrom:prototype];
}
- (UnreadTupleBuilder*) builder {
  return [UnreadTuple builder];
}
- (UnreadTupleBuilder*) toBuilder {
  return [UnreadTuple builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasUnread) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unread", [NSNumber numberWithInteger:self.unread]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasUnread) {
    [dictionary setObject: [NSNumber numberWithInteger:self.unread] forKey: @"unread"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UnreadTuple class]]) {
    return NO;
  }
  UnreadTuple *otherMessage = other;
  return
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasUnread == otherMessage.hasUnread &&
      (!self.hasUnread || self.unread == otherMessage.unread) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasUnread) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.unread] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UnreadTupleBuilder()
@property (strong) UnreadTuple* resultUnreadTuple;
@end

@implementation UnreadTupleBuilder
@synthesize resultUnreadTuple;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUnreadTuple = [[UnreadTuple alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUnreadTuple;
}
- (UnreadTupleBuilder*) clear {
  self.resultUnreadTuple = [[UnreadTuple alloc] init];
  return self;
}
- (UnreadTupleBuilder*) clone {
  return [UnreadTuple builderWithPrototype:resultUnreadTuple];
}
- (UnreadTuple*) defaultInstance {
  return [UnreadTuple defaultInstance];
}
- (UnreadTuple*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UnreadTuple*) buildPartial {
  UnreadTuple* returnMe = resultUnreadTuple;
  self.resultUnreadTuple = nil;
  return returnMe;
}
- (UnreadTupleBuilder*) mergeFrom:(UnreadTuple*) other {
  if (other == [UnreadTuple defaultInstance]) {
    return self;
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasUnread) {
    [self setUnread:other.unread];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UnreadTupleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UnreadTupleBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCid:[input readString]];
        break;
      }
      case 16: {
        [self setUnread:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCid {
  return resultUnreadTuple.hasCid;
}
- (NSString*) cid {
  return resultUnreadTuple.cid;
}
- (UnreadTupleBuilder*) setCid:(NSString*) value {
  resultUnreadTuple.hasCid = YES;
  resultUnreadTuple.cid = value;
  return self;
}
- (UnreadTupleBuilder*) clearCid {
  resultUnreadTuple.hasCid = NO;
  resultUnreadTuple.cid = @"";
  return self;
}
- (BOOL) hasUnread {
  return resultUnreadTuple.hasUnread;
}
- (SInt32) unread {
  return resultUnreadTuple.unread;
}
- (UnreadTupleBuilder*) setUnread:(SInt32) value {
  resultUnreadTuple.hasUnread = YES;
  resultUnreadTuple.unread = value;
  return self;
}
- (UnreadTupleBuilder*) clearUnread {
  resultUnreadTuple.hasUnread = NO;
  resultUnreadTuple.unread = 0;
  return self;
}
@end

@interface LogItem ()
@property (strong) NSString* from;
@property (strong) NSString* data;
@property SInt64 timestamp;
@property (strong) NSString* msgId;
@end

@implementation LogItem

- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) _value_ {
  hasFrom_ = !!_value_;
}
@synthesize from;
- (BOOL) hasData {
  return !!hasData_;
}
- (void) setHasData:(BOOL) _value_ {
  hasData_ = !!_value_;
}
@synthesize data;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasMsgId {
  return !!hasMsgId_;
}
- (void) setHasMsgId:(BOOL) _value_ {
  hasMsgId_ = !!_value_;
}
@synthesize msgId;
- (instancetype) init {
  if ((self = [super init])) {
    self.from = @"";
    self.data = @"";
    self.timestamp = 0L;
    self.msgId = @"";
  }
  return self;
}
static LogItem* defaultLogItemInstance = nil;
+ (void) initialize {
  if (self == [LogItem class]) {
    defaultLogItemInstance = [[LogItem alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLogItemInstance;
}
- (instancetype) defaultInstance {
  return defaultLogItemInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFrom) {
    [output writeString:1 value:self.from];
  }
  if (self.hasData) {
    [output writeString:2 value:self.data];
  }
  if (self.hasTimestamp) {
    [output writeInt64:3 value:self.timestamp];
  }
  if (self.hasMsgId) {
    [output writeString:4 value:self.msgId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasFrom) {
    size_ += computeStringSize(1, self.from);
  }
  if (self.hasData) {
    size_ += computeStringSize(2, self.data);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(3, self.timestamp);
  }
  if (self.hasMsgId) {
    size_ += computeStringSize(4, self.msgId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LogItem*) parseFromData:(NSData*) data {
  return (LogItem*)[[[LogItem builder] mergeFromData:data] build];
}
+ (LogItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LogItem*)[[[LogItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LogItem*) parseFromInputStream:(NSInputStream*) input {
  return (LogItem*)[[[LogItem builder] mergeFromInputStream:input] build];
}
+ (LogItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LogItem*)[[[LogItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LogItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LogItem*)[[[LogItem builder] mergeFromCodedInputStream:input] build];
}
+ (LogItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LogItem*)[[[LogItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LogItemBuilder*) builder {
  return [[LogItemBuilder alloc] init];
}
+ (LogItemBuilder*) builderWithPrototype:(LogItem*) prototype {
  return [[LogItem builder] mergeFrom:prototype];
}
- (LogItemBuilder*) builder {
  return [LogItem builder];
}
- (LogItemBuilder*) toBuilder {
  return [LogItem builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"from", self.from];
  }
  if (self.hasData) {
    [output appendFormat:@"%@%@: %@\n", indent, @"data", self.data];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasMsgId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msgId", self.msgId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasFrom) {
    [dictionary setObject: self.from forKey: @"from"];
  }
  if (self.hasData) {
    [dictionary setObject: self.data forKey: @"data"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasMsgId) {
    [dictionary setObject: self.msgId forKey: @"msgId"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LogItem class]]) {
    return NO;
  }
  LogItem *otherMessage = other;
  return
      self.hasFrom == otherMessage.hasFrom &&
      (!self.hasFrom || [self.from isEqual:otherMessage.from]) &&
      self.hasData == otherMessage.hasData &&
      (!self.hasData || [self.data isEqual:otherMessage.data]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasMsgId == otherMessage.hasMsgId &&
      (!self.hasMsgId || [self.msgId isEqual:otherMessage.msgId]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasFrom) {
    hashCode = hashCode * 31 + [self.from hash];
  }
  if (self.hasData) {
    hashCode = hashCode * 31 + [self.data hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasMsgId) {
    hashCode = hashCode * 31 + [self.msgId hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LogItemBuilder()
@property (strong) LogItem* resultLogItem;
@end

@implementation LogItemBuilder
@synthesize resultLogItem;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLogItem = [[LogItem alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLogItem;
}
- (LogItemBuilder*) clear {
  self.resultLogItem = [[LogItem alloc] init];
  return self;
}
- (LogItemBuilder*) clone {
  return [LogItem builderWithPrototype:resultLogItem];
}
- (LogItem*) defaultInstance {
  return [LogItem defaultInstance];
}
- (LogItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LogItem*) buildPartial {
  LogItem* returnMe = resultLogItem;
  self.resultLogItem = nil;
  return returnMe;
}
- (LogItemBuilder*) mergeFrom:(LogItem*) other {
  if (other == [LogItem defaultInstance]) {
    return self;
  }
  if (other.hasFrom) {
    [self setFrom:other.from];
  }
  if (other.hasData) {
    [self setData:other.data];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasMsgId) {
    [self setMsgId:other.msgId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LogItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LogItemBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFrom:[input readString]];
        break;
      }
      case 18: {
        [self setData:[input readString]];
        break;
      }
      case 24: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 34: {
        [self setMsgId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFrom {
  return resultLogItem.hasFrom;
}
- (NSString*) from {
  return resultLogItem.from;
}
- (LogItemBuilder*) setFrom:(NSString*) value {
  resultLogItem.hasFrom = YES;
  resultLogItem.from = value;
  return self;
}
- (LogItemBuilder*) clearFrom {
  resultLogItem.hasFrom = NO;
  resultLogItem.from = @"";
  return self;
}
- (BOOL) hasData {
  return resultLogItem.hasData;
}
- (NSString*) data {
  return resultLogItem.data;
}
- (LogItemBuilder*) setData:(NSString*) value {
  resultLogItem.hasData = YES;
  resultLogItem.data = value;
  return self;
}
- (LogItemBuilder*) clearData {
  resultLogItem.hasData = NO;
  resultLogItem.data = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultLogItem.hasTimestamp;
}
- (SInt64) timestamp {
  return resultLogItem.timestamp;
}
- (LogItemBuilder*) setTimestamp:(SInt64) value {
  resultLogItem.hasTimestamp = YES;
  resultLogItem.timestamp = value;
  return self;
}
- (LogItemBuilder*) clearTimestamp {
  resultLogItem.hasTimestamp = NO;
  resultLogItem.timestamp = 0L;
  return self;
}
- (BOOL) hasMsgId {
  return resultLogItem.hasMsgId;
}
- (NSString*) msgId {
  return resultLogItem.msgId;
}
- (LogItemBuilder*) setMsgId:(NSString*) value {
  resultLogItem.hasMsgId = YES;
  resultLogItem.msgId = value;
  return self;
}
- (LogItemBuilder*) clearMsgId {
  resultLogItem.hasMsgId = NO;
  resultLogItem.msgId = @"";
  return self;
}
@end

@interface LoginCommand ()
@end

@implementation LoginCommand

- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static LoginCommand* defaultLoginCommandInstance = nil;
+ (void) initialize {
  if (self == [LoginCommand class]) {
    defaultLoginCommandInstance = [[LoginCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLoginCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultLoginCommandInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LoginCommand*) parseFromData:(NSData*) data {
  return (LoginCommand*)[[[LoginCommand builder] mergeFromData:data] build];
}
+ (LoginCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginCommand*)[[[LoginCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginCommand*) parseFromInputStream:(NSInputStream*) input {
  return (LoginCommand*)[[[LoginCommand builder] mergeFromInputStream:input] build];
}
+ (LoginCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginCommand*)[[[LoginCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginCommand*)[[[LoginCommand builder] mergeFromCodedInputStream:input] build];
}
+ (LoginCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginCommand*)[[[LoginCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginCommandBuilder*) builder {
  return [[LoginCommandBuilder alloc] init];
}
+ (LoginCommandBuilder*) builderWithPrototype:(LoginCommand*) prototype {
  return [[LoginCommand builder] mergeFrom:prototype];
}
- (LoginCommandBuilder*) builder {
  return [LoginCommand builder];
}
- (LoginCommandBuilder*) toBuilder {
  return [LoginCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LoginCommand class]]) {
    return NO;
  }
  LoginCommand *otherMessage = other;
  return
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LoginCommandBuilder()
@property (strong) LoginCommand* resultLoginCommand;
@end

@implementation LoginCommandBuilder
@synthesize resultLoginCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLoginCommand = [[LoginCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLoginCommand;
}
- (LoginCommandBuilder*) clear {
  self.resultLoginCommand = [[LoginCommand alloc] init];
  return self;
}
- (LoginCommandBuilder*) clone {
  return [LoginCommand builderWithPrototype:resultLoginCommand];
}
- (LoginCommand*) defaultInstance {
  return [LoginCommand defaultInstance];
}
- (LoginCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginCommand*) buildPartial {
  LoginCommand* returnMe = resultLoginCommand;
  self.resultLoginCommand = nil;
  return returnMe;
}
- (LoginCommandBuilder*) mergeFrom:(LoginCommand*) other {
  if (other == [LoginCommand defaultInstance]) {
    return self;
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
    }
  }
}
@end

@interface DataCommand ()
@property (strong) NSMutableArray * idsArray;
@property (strong) NSMutableArray * msgArray;
@end

@implementation DataCommand

@synthesize idsArray;
@dynamic ids;
@synthesize msgArray;
@dynamic msg;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static DataCommand* defaultDataCommandInstance = nil;
+ (void) initialize {
  if (self == [DataCommand class]) {
    defaultDataCommandInstance = [[DataCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDataCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultDataCommandInstance;
}
- (NSArray *)ids {
  return idsArray;
}
- (NSString*)idsAtIndex:(NSUInteger)index {
  return [idsArray objectAtIndex:index];
}
- (NSArray *)msg {
  return msgArray;
}
- (NSString*)msgAtIndex:(NSUInteger)index {
  return [msgArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.idsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  [self.msgArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.idsArray.count;
    [self.idsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.msgArray.count;
    [self.msgArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DataCommand*) parseFromData:(NSData*) data {
  return (DataCommand*)[[[DataCommand builder] mergeFromData:data] build];
}
+ (DataCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DataCommand*)[[[DataCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DataCommand*) parseFromInputStream:(NSInputStream*) input {
  return (DataCommand*)[[[DataCommand builder] mergeFromInputStream:input] build];
}
+ (DataCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DataCommand*)[[[DataCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DataCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DataCommand*)[[[DataCommand builder] mergeFromCodedInputStream:input] build];
}
+ (DataCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DataCommand*)[[[DataCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DataCommandBuilder*) builder {
  return [[DataCommandBuilder alloc] init];
}
+ (DataCommandBuilder*) builderWithPrototype:(DataCommand*) prototype {
  return [[DataCommand builder] mergeFrom:prototype];
}
- (DataCommandBuilder*) builder {
  return [DataCommand builder];
}
- (DataCommandBuilder*) toBuilder {
  return [DataCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.idsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ids", obj];
  }];
  [self.msgArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.ids forKey: @"ids"];
  [dictionary setObject:self.msg forKey: @"msg"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DataCommand class]]) {
    return NO;
  }
  DataCommand *otherMessage = other;
  return
      [self.idsArray isEqualToArray:otherMessage.idsArray] &&
      [self.msgArray isEqualToArray:otherMessage.msgArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.idsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.msgArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DataCommandBuilder()
@property (strong) DataCommand* resultDataCommand;
@end

@implementation DataCommandBuilder
@synthesize resultDataCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDataCommand = [[DataCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDataCommand;
}
- (DataCommandBuilder*) clear {
  self.resultDataCommand = [[DataCommand alloc] init];
  return self;
}
- (DataCommandBuilder*) clone {
  return [DataCommand builderWithPrototype:resultDataCommand];
}
- (DataCommand*) defaultInstance {
  return [DataCommand defaultInstance];
}
- (DataCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DataCommand*) buildPartial {
  DataCommand* returnMe = resultDataCommand;
  self.resultDataCommand = nil;
  return returnMe;
}
- (DataCommandBuilder*) mergeFrom:(DataCommand*) other {
  if (other == [DataCommand defaultInstance]) {
    return self;
  }
  if (other.idsArray.count > 0) {
    if (resultDataCommand.idsArray == nil) {
      resultDataCommand.idsArray = [[NSMutableArray alloc] initWithArray:other.idsArray];
    } else {
      [resultDataCommand.idsArray addObjectsFromArray:other.idsArray];
    }
  }
  if (other.msgArray.count > 0) {
    if (resultDataCommand.msgArray == nil) {
      resultDataCommand.msgArray = [[NSMutableArray alloc] initWithArray:other.msgArray];
    } else {
      [resultDataCommand.msgArray addObjectsFromArray:other.msgArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DataCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DataCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addIds:[input readString]];
        break;
      }
      case 18: {
        [self addMsg:[input readString]];
        break;
      }
    }
  }
}
- (NSMutableArray *)ids {
  return resultDataCommand.idsArray;
}
- (NSString*)idsAtIndex:(NSUInteger)index {
  return [resultDataCommand idsAtIndex:index];
}
- (DataCommandBuilder *)addIds:(NSString*)value {
  if (resultDataCommand.idsArray == nil) {
    resultDataCommand.idsArray = [[NSMutableArray alloc]init];
  }
  [resultDataCommand.idsArray addObject:value];
  return self;
}
- (DataCommandBuilder *)setIdsArray:(NSArray *)array {
  resultDataCommand.idsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (DataCommandBuilder *)clearIds {
  resultDataCommand.idsArray = nil;
  return self;
}
- (NSMutableArray *)msg {
  return resultDataCommand.msgArray;
}
- (NSString*)msgAtIndex:(NSUInteger)index {
  return [resultDataCommand msgAtIndex:index];
}
- (DataCommandBuilder *)addMsg:(NSString*)value {
  if (resultDataCommand.msgArray == nil) {
    resultDataCommand.msgArray = [[NSMutableArray alloc]init];
  }
  [resultDataCommand.msgArray addObject:value];
  return self;
}
- (DataCommandBuilder *)setMsgArray:(NSArray *)array {
  resultDataCommand.msgArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (DataCommandBuilder *)clearMsg {
  resultDataCommand.msgArray = nil;
  return self;
}
@end

@interface SessionCommand ()
@property SInt64 t;
@property (strong) NSString* n;
@property (strong) NSString* s;
@property (strong) NSString* ua;
@property BOOL r;
@property (strong) NSString* tag;
@property (strong) NSString* deviceId;
@property (strong) NSMutableArray * sessionPeerIdsArray;
@property (strong) NSMutableArray * onlineSessionPeerIdsArray;
@property (strong) NSString* st;
@property (strong) NSString* stTtl;
@property SInt32 code;
@property (strong) NSString* reason;
@end

@implementation SessionCommand

- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (BOOL) hasN {
  return !!hasN_;
}
- (void) setHasN:(BOOL) _value_ {
  hasN_ = !!_value_;
}
@synthesize n;
- (BOOL) hasS {
  return !!hasS_;
}
- (void) setHasS:(BOOL) _value_ {
  hasS_ = !!_value_;
}
@synthesize s;
- (BOOL) hasUa {
  return !!hasUa_;
}
- (void) setHasUa:(BOOL) _value_ {
  hasUa_ = !!_value_;
}
@synthesize ua;
- (BOOL) hasR {
  return !!hasR_;
}
- (void) setHasR:(BOOL) _value_ {
  hasR_ = !!_value_;
}
- (BOOL) r {
  return !!r_;
}
- (void) setR:(BOOL) _value_ {
  r_ = !!_value_;
}
- (BOOL) hasTag {
  return !!hasTag_;
}
- (void) setHasTag:(BOOL) _value_ {
  hasTag_ = !!_value_;
}
@synthesize tag;
- (BOOL) hasDeviceId {
  return !!hasDeviceId_;
}
- (void) setHasDeviceId:(BOOL) _value_ {
  hasDeviceId_ = !!_value_;
}
@synthesize deviceId;
@synthesize sessionPeerIdsArray;
@dynamic sessionPeerIds;
@synthesize onlineSessionPeerIdsArray;
@dynamic onlineSessionPeerIds;
- (BOOL) hasSt {
  return !!hasSt_;
}
- (void) setHasSt:(BOOL) _value_ {
  hasSt_ = !!_value_;
}
@synthesize st;
- (BOOL) hasStTtl {
  return !!hasStTtl_;
}
- (void) setHasStTtl:(BOOL) _value_ {
  hasStTtl_ = !!_value_;
}
@synthesize stTtl;
- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (instancetype) init {
  if ((self = [super init])) {
    self.t = 0L;
    self.n = @"";
    self.s = @"";
    self.ua = @"";
    self.r = NO;
    self.tag = @"";
    self.deviceId = @"";
    self.st = @"";
    self.stTtl = @"";
    self.code = 0;
    self.reason = @"";
  }
  return self;
}
static SessionCommand* defaultSessionCommandInstance = nil;
+ (void) initialize {
  if (self == [SessionCommand class]) {
    defaultSessionCommandInstance = [[SessionCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultSessionCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultSessionCommandInstance;
}
- (NSArray *)sessionPeerIds {
  return sessionPeerIdsArray;
}
- (NSString*)sessionPeerIdsAtIndex:(NSUInteger)index {
  return [sessionPeerIdsArray objectAtIndex:index];
}
- (NSArray *)onlineSessionPeerIds {
  return onlineSessionPeerIdsArray;
}
- (NSString*)onlineSessionPeerIdsAtIndex:(NSUInteger)index {
  return [onlineSessionPeerIdsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasT) {
    [output writeInt64:1 value:self.t];
  }
  if (self.hasN) {
    [output writeString:2 value:self.n];
  }
  if (self.hasS) {
    [output writeString:3 value:self.s];
  }
  if (self.hasUa) {
    [output writeString:4 value:self.ua];
  }
  if (self.hasR) {
    [output writeBool:5 value:self.r];
  }
  if (self.hasTag) {
    [output writeString:6 value:self.tag];
  }
  if (self.hasDeviceId) {
    [output writeString:7 value:self.deviceId];
  }
  [self.sessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:8 value:element];
  }];
  [self.onlineSessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:9 value:element];
  }];
  if (self.hasSt) {
    [output writeString:10 value:self.st];
  }
  if (self.hasStTtl) {
    [output writeString:11 value:self.stTtl];
  }
  if (self.hasCode) {
    [output writeInt32:12 value:self.code];
  }
  if (self.hasReason) {
    [output writeString:13 value:self.reason];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasT) {
    size_ += computeInt64Size(1, self.t);
  }
  if (self.hasN) {
    size_ += computeStringSize(2, self.n);
  }
  if (self.hasS) {
    size_ += computeStringSize(3, self.s);
  }
  if (self.hasUa) {
    size_ += computeStringSize(4, self.ua);
  }
  if (self.hasR) {
    size_ += computeBoolSize(5, self.r);
  }
  if (self.hasTag) {
    size_ += computeStringSize(6, self.tag);
  }
  if (self.hasDeviceId) {
    size_ += computeStringSize(7, self.deviceId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.sessionPeerIdsArray.count;
    [self.sessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.onlineSessionPeerIdsArray.count;
    [self.onlineSessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasSt) {
    size_ += computeStringSize(10, self.st);
  }
  if (self.hasStTtl) {
    size_ += computeStringSize(11, self.stTtl);
  }
  if (self.hasCode) {
    size_ += computeInt32Size(12, self.code);
  }
  if (self.hasReason) {
    size_ += computeStringSize(13, self.reason);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SessionCommand*) parseFromData:(NSData*) data {
  return (SessionCommand*)[[[SessionCommand builder] mergeFromData:data] build];
}
+ (SessionCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionCommand*)[[[SessionCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (SessionCommand*) parseFromInputStream:(NSInputStream*) input {
  return (SessionCommand*)[[[SessionCommand builder] mergeFromInputStream:input] build];
}
+ (SessionCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionCommand*)[[[SessionCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (SessionCommand*)[[[SessionCommand builder] mergeFromCodedInputStream:input] build];
}
+ (SessionCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (SessionCommand*)[[[SessionCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (SessionCommandBuilder*) builder {
  return [[SessionCommandBuilder alloc] init];
}
+ (SessionCommandBuilder*) builderWithPrototype:(SessionCommand*) prototype {
  return [[SessionCommand builder] mergeFrom:prototype];
}
- (SessionCommandBuilder*) builder {
  return [SessionCommand builder];
}
- (SessionCommandBuilder*) toBuilder {
  return [SessionCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  if (self.hasN) {
    [output appendFormat:@"%@%@: %@\n", indent, @"n", self.n];
  }
  if (self.hasS) {
    [output appendFormat:@"%@%@: %@\n", indent, @"s", self.s];
  }
  if (self.hasUa) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ua", self.ua];
  }
  if (self.hasR) {
    [output appendFormat:@"%@%@: %@\n", indent, @"r", [NSNumber numberWithBool:self.r]];
  }
  if (self.hasTag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tag", self.tag];
  }
  if (self.hasDeviceId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deviceId", self.deviceId];
  }
  [self.sessionPeerIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sessionPeerIds", obj];
  }];
  [self.onlineSessionPeerIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onlineSessionPeerIds", obj];
  }];
  if (self.hasSt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"st", self.st];
  }
  if (self.hasStTtl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stTtl", self.stTtl];
  }
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  if (self.hasN) {
    [dictionary setObject: self.n forKey: @"n"];
  }
  if (self.hasS) {
    [dictionary setObject: self.s forKey: @"s"];
  }
  if (self.hasUa) {
    [dictionary setObject: self.ua forKey: @"ua"];
  }
  if (self.hasR) {
    [dictionary setObject: [NSNumber numberWithBool:self.r] forKey: @"r"];
  }
  if (self.hasTag) {
    [dictionary setObject: self.tag forKey: @"tag"];
  }
  if (self.hasDeviceId) {
    [dictionary setObject: self.deviceId forKey: @"deviceId"];
  }
  [dictionary setObject:self.sessionPeerIds forKey: @"sessionPeerIds"];
  [dictionary setObject:self.onlineSessionPeerIds forKey: @"onlineSessionPeerIds"];
  if (self.hasSt) {
    [dictionary setObject: self.st forKey: @"st"];
  }
  if (self.hasStTtl) {
    [dictionary setObject: self.stTtl forKey: @"stTtl"];
  }
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasReason) {
    [dictionary setObject: self.reason forKey: @"reason"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[SessionCommand class]]) {
    return NO;
  }
  SessionCommand *otherMessage = other;
  return
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      self.hasN == otherMessage.hasN &&
      (!self.hasN || [self.n isEqual:otherMessage.n]) &&
      self.hasS == otherMessage.hasS &&
      (!self.hasS || [self.s isEqual:otherMessage.s]) &&
      self.hasUa == otherMessage.hasUa &&
      (!self.hasUa || [self.ua isEqual:otherMessage.ua]) &&
      self.hasR == otherMessage.hasR &&
      (!self.hasR || self.r == otherMessage.r) &&
      self.hasTag == otherMessage.hasTag &&
      (!self.hasTag || [self.tag isEqual:otherMessage.tag]) &&
      self.hasDeviceId == otherMessage.hasDeviceId &&
      (!self.hasDeviceId || [self.deviceId isEqual:otherMessage.deviceId]) &&
      [self.sessionPeerIdsArray isEqualToArray:otherMessage.sessionPeerIdsArray] &&
      [self.onlineSessionPeerIdsArray isEqualToArray:otherMessage.onlineSessionPeerIdsArray] &&
      self.hasSt == otherMessage.hasSt &&
      (!self.hasSt || [self.st isEqual:otherMessage.st]) &&
      self.hasStTtl == otherMessage.hasStTtl &&
      (!self.hasStTtl || [self.stTtl isEqual:otherMessage.stTtl]) &&
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  if (self.hasN) {
    hashCode = hashCode * 31 + [self.n hash];
  }
  if (self.hasS) {
    hashCode = hashCode * 31 + [self.s hash];
  }
  if (self.hasUa) {
    hashCode = hashCode * 31 + [self.ua hash];
  }
  if (self.hasR) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.r] hash];
  }
  if (self.hasTag) {
    hashCode = hashCode * 31 + [self.tag hash];
  }
  if (self.hasDeviceId) {
    hashCode = hashCode * 31 + [self.deviceId hash];
  }
  [self.sessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.onlineSessionPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasSt) {
    hashCode = hashCode * 31 + [self.st hash];
  }
  if (self.hasStTtl) {
    hashCode = hashCode * 31 + [self.stTtl hash];
  }
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface SessionCommandBuilder()
@property (strong) SessionCommand* resultSessionCommand;
@end

@implementation SessionCommandBuilder
@synthesize resultSessionCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultSessionCommand = [[SessionCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultSessionCommand;
}
- (SessionCommandBuilder*) clear {
  self.resultSessionCommand = [[SessionCommand alloc] init];
  return self;
}
- (SessionCommandBuilder*) clone {
  return [SessionCommand builderWithPrototype:resultSessionCommand];
}
- (SessionCommand*) defaultInstance {
  return [SessionCommand defaultInstance];
}
- (SessionCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (SessionCommand*) buildPartial {
  SessionCommand* returnMe = resultSessionCommand;
  self.resultSessionCommand = nil;
  return returnMe;
}
- (SessionCommandBuilder*) mergeFrom:(SessionCommand*) other {
  if (other == [SessionCommand defaultInstance]) {
    return self;
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.hasN) {
    [self setN:other.n];
  }
  if (other.hasS) {
    [self setS:other.s];
  }
  if (other.hasUa) {
    [self setUa:other.ua];
  }
  if (other.hasR) {
    [self setR:other.r];
  }
  if (other.hasTag) {
    [self setTag:other.tag];
  }
  if (other.hasDeviceId) {
    [self setDeviceId:other.deviceId];
  }
  if (other.sessionPeerIdsArray.count > 0) {
    if (resultSessionCommand.sessionPeerIdsArray == nil) {
      resultSessionCommand.sessionPeerIdsArray = [[NSMutableArray alloc] initWithArray:other.sessionPeerIdsArray];
    } else {
      [resultSessionCommand.sessionPeerIdsArray addObjectsFromArray:other.sessionPeerIdsArray];
    }
  }
  if (other.onlineSessionPeerIdsArray.count > 0) {
    if (resultSessionCommand.onlineSessionPeerIdsArray == nil) {
      resultSessionCommand.onlineSessionPeerIdsArray = [[NSMutableArray alloc] initWithArray:other.onlineSessionPeerIdsArray];
    } else {
      [resultSessionCommand.onlineSessionPeerIdsArray addObjectsFromArray:other.onlineSessionPeerIdsArray];
    }
  }
  if (other.hasSt) {
    [self setSt:other.st];
  }
  if (other.hasStTtl) {
    [self setStTtl:other.stTtl];
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (SessionCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (SessionCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setT:[input readInt64]];
        break;
      }
      case 18: {
        [self setN:[input readString]];
        break;
      }
      case 26: {
        [self setS:[input readString]];
        break;
      }
      case 34: {
        [self setUa:[input readString]];
        break;
      }
      case 40: {
        [self setR:[input readBool]];
        break;
      }
      case 50: {
        [self setTag:[input readString]];
        break;
      }
      case 58: {
        [self setDeviceId:[input readString]];
        break;
      }
      case 66: {
        [self addSessionPeerIds:[input readString]];
        break;
      }
      case 74: {
        [self addOnlineSessionPeerIds:[input readString]];
        break;
      }
      case 82: {
        [self setSt:[input readString]];
        break;
      }
      case 90: {
        [self setStTtl:[input readString]];
        break;
      }
      case 96: {
        [self setCode:[input readInt32]];
        break;
      }
      case 106: {
        [self setReason:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasT {
  return resultSessionCommand.hasT;
}
- (SInt64) t {
  return resultSessionCommand.t;
}
- (SessionCommandBuilder*) setT:(SInt64) value {
  resultSessionCommand.hasT = YES;
  resultSessionCommand.t = value;
  return self;
}
- (SessionCommandBuilder*) clearT {
  resultSessionCommand.hasT = NO;
  resultSessionCommand.t = 0L;
  return self;
}
- (BOOL) hasN {
  return resultSessionCommand.hasN;
}
- (NSString*) n {
  return resultSessionCommand.n;
}
- (SessionCommandBuilder*) setN:(NSString*) value {
  resultSessionCommand.hasN = YES;
  resultSessionCommand.n = value;
  return self;
}
- (SessionCommandBuilder*) clearN {
  resultSessionCommand.hasN = NO;
  resultSessionCommand.n = @"";
  return self;
}
- (BOOL) hasS {
  return resultSessionCommand.hasS;
}
- (NSString*) s {
  return resultSessionCommand.s;
}
- (SessionCommandBuilder*) setS:(NSString*) value {
  resultSessionCommand.hasS = YES;
  resultSessionCommand.s = value;
  return self;
}
- (SessionCommandBuilder*) clearS {
  resultSessionCommand.hasS = NO;
  resultSessionCommand.s = @"";
  return self;
}
- (BOOL) hasUa {
  return resultSessionCommand.hasUa;
}
- (NSString*) ua {
  return resultSessionCommand.ua;
}
- (SessionCommandBuilder*) setUa:(NSString*) value {
  resultSessionCommand.hasUa = YES;
  resultSessionCommand.ua = value;
  return self;
}
- (SessionCommandBuilder*) clearUa {
  resultSessionCommand.hasUa = NO;
  resultSessionCommand.ua = @"";
  return self;
}
- (BOOL) hasR {
  return resultSessionCommand.hasR;
}
- (BOOL) r {
  return resultSessionCommand.r;
}
- (SessionCommandBuilder*) setR:(BOOL) value {
  resultSessionCommand.hasR = YES;
  resultSessionCommand.r = value;
  return self;
}
- (SessionCommandBuilder*) clearR {
  resultSessionCommand.hasR = NO;
  resultSessionCommand.r = NO;
  return self;
}
- (BOOL) hasTag {
  return resultSessionCommand.hasTag;
}
- (NSString*) tag {
  return resultSessionCommand.tag;
}
- (SessionCommandBuilder*) setTag:(NSString*) value {
  resultSessionCommand.hasTag = YES;
  resultSessionCommand.tag = value;
  return self;
}
- (SessionCommandBuilder*) clearTag {
  resultSessionCommand.hasTag = NO;
  resultSessionCommand.tag = @"";
  return self;
}
- (BOOL) hasDeviceId {
  return resultSessionCommand.hasDeviceId;
}
- (NSString*) deviceId {
  return resultSessionCommand.deviceId;
}
- (SessionCommandBuilder*) setDeviceId:(NSString*) value {
  resultSessionCommand.hasDeviceId = YES;
  resultSessionCommand.deviceId = value;
  return self;
}
- (SessionCommandBuilder*) clearDeviceId {
  resultSessionCommand.hasDeviceId = NO;
  resultSessionCommand.deviceId = @"";
  return self;
}
- (NSMutableArray *)sessionPeerIds {
  return resultSessionCommand.sessionPeerIdsArray;
}
- (NSString*)sessionPeerIdsAtIndex:(NSUInteger)index {
  return [resultSessionCommand sessionPeerIdsAtIndex:index];
}
- (SessionCommandBuilder *)addSessionPeerIds:(NSString*)value {
  if (resultSessionCommand.sessionPeerIdsArray == nil) {
    resultSessionCommand.sessionPeerIdsArray = [[NSMutableArray alloc]init];
  }
  [resultSessionCommand.sessionPeerIdsArray addObject:value];
  return self;
}
- (SessionCommandBuilder *)setSessionPeerIdsArray:(NSArray *)array {
  resultSessionCommand.sessionPeerIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (SessionCommandBuilder *)clearSessionPeerIds {
  resultSessionCommand.sessionPeerIdsArray = nil;
  return self;
}
- (NSMutableArray *)onlineSessionPeerIds {
  return resultSessionCommand.onlineSessionPeerIdsArray;
}
- (NSString*)onlineSessionPeerIdsAtIndex:(NSUInteger)index {
  return [resultSessionCommand onlineSessionPeerIdsAtIndex:index];
}
- (SessionCommandBuilder *)addOnlineSessionPeerIds:(NSString*)value {
  if (resultSessionCommand.onlineSessionPeerIdsArray == nil) {
    resultSessionCommand.onlineSessionPeerIdsArray = [[NSMutableArray alloc]init];
  }
  [resultSessionCommand.onlineSessionPeerIdsArray addObject:value];
  return self;
}
- (SessionCommandBuilder *)setOnlineSessionPeerIdsArray:(NSArray *)array {
  resultSessionCommand.onlineSessionPeerIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (SessionCommandBuilder *)clearOnlineSessionPeerIds {
  resultSessionCommand.onlineSessionPeerIdsArray = nil;
  return self;
}
- (BOOL) hasSt {
  return resultSessionCommand.hasSt;
}
- (NSString*) st {
  return resultSessionCommand.st;
}
- (SessionCommandBuilder*) setSt:(NSString*) value {
  resultSessionCommand.hasSt = YES;
  resultSessionCommand.st = value;
  return self;
}
- (SessionCommandBuilder*) clearSt {
  resultSessionCommand.hasSt = NO;
  resultSessionCommand.st = @"";
  return self;
}
- (BOOL) hasStTtl {
  return resultSessionCommand.hasStTtl;
}
- (NSString*) stTtl {
  return resultSessionCommand.stTtl;
}
- (SessionCommandBuilder*) setStTtl:(NSString*) value {
  resultSessionCommand.hasStTtl = YES;
  resultSessionCommand.stTtl = value;
  return self;
}
- (SessionCommandBuilder*) clearStTtl {
  resultSessionCommand.hasStTtl = NO;
  resultSessionCommand.stTtl = @"";
  return self;
}
- (BOOL) hasCode {
  return resultSessionCommand.hasCode;
}
- (SInt32) code {
  return resultSessionCommand.code;
}
- (SessionCommandBuilder*) setCode:(SInt32) value {
  resultSessionCommand.hasCode = YES;
  resultSessionCommand.code = value;
  return self;
}
- (SessionCommandBuilder*) clearCode {
  resultSessionCommand.hasCode = NO;
  resultSessionCommand.code = 0;
  return self;
}
- (BOOL) hasReason {
  return resultSessionCommand.hasReason;
}
- (NSString*) reason {
  return resultSessionCommand.reason;
}
- (SessionCommandBuilder*) setReason:(NSString*) value {
  resultSessionCommand.hasReason = YES;
  resultSessionCommand.reason = value;
  return self;
}
- (SessionCommandBuilder*) clearReason {
  resultSessionCommand.hasReason = NO;
  resultSessionCommand.reason = @"";
  return self;
}
@end

@interface ErrorCommand ()
@property SInt32 code;
@property (strong) NSString* reason;
@property SInt32 appCode;
@end

@implementation ErrorCommand

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (BOOL) hasAppCode {
  return !!hasAppCode_;
}
- (void) setHasAppCode:(BOOL) _value_ {
  hasAppCode_ = !!_value_;
}
@synthesize appCode;
- (instancetype) init {
  if ((self = [super init])) {
    self.code = 0;
    self.reason = @"";
    self.appCode = 0;
  }
  return self;
}
static ErrorCommand* defaultErrorCommandInstance = nil;
+ (void) initialize {
  if (self == [ErrorCommand class]) {
    defaultErrorCommandInstance = [[ErrorCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultErrorCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultErrorCommandInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCode) {
    return NO;
  }
  if (!self.hasReason) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeInt32:1 value:self.code];
  }
  if (self.hasReason) {
    [output writeString:2 value:self.reason];
  }
  if (self.hasAppCode) {
    [output writeInt32:3 value:self.appCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCode) {
    size_ += computeInt32Size(1, self.code);
  }
  if (self.hasReason) {
    size_ += computeStringSize(2, self.reason);
  }
  if (self.hasAppCode) {
    size_ += computeInt32Size(3, self.appCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ErrorCommand*) parseFromData:(NSData*) data {
  return (ErrorCommand*)[[[ErrorCommand builder] mergeFromData:data] build];
}
+ (ErrorCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ErrorCommand*)[[[ErrorCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ErrorCommand*) parseFromInputStream:(NSInputStream*) input {
  return (ErrorCommand*)[[[ErrorCommand builder] mergeFromInputStream:input] build];
}
+ (ErrorCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ErrorCommand*)[[[ErrorCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ErrorCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ErrorCommand*)[[[ErrorCommand builder] mergeFromCodedInputStream:input] build];
}
+ (ErrorCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ErrorCommand*)[[[ErrorCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ErrorCommandBuilder*) builder {
  return [[ErrorCommandBuilder alloc] init];
}
+ (ErrorCommandBuilder*) builderWithPrototype:(ErrorCommand*) prototype {
  return [[ErrorCommand builder] mergeFrom:prototype];
}
- (ErrorCommandBuilder*) builder {
  return [ErrorCommand builder];
}
- (ErrorCommandBuilder*) toBuilder {
  return [ErrorCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasAppCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appCode", [NSNumber numberWithInteger:self.appCode]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasReason) {
    [dictionary setObject: self.reason forKey: @"reason"];
  }
  if (self.hasAppCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.appCode] forKey: @"appCode"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ErrorCommand class]]) {
    return NO;
  }
  ErrorCommand *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasAppCode == otherMessage.hasAppCode &&
      (!self.hasAppCode || self.appCode == otherMessage.appCode) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasAppCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.appCode] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ErrorCommandBuilder()
@property (strong) ErrorCommand* resultErrorCommand;
@end

@implementation ErrorCommandBuilder
@synthesize resultErrorCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultErrorCommand = [[ErrorCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultErrorCommand;
}
- (ErrorCommandBuilder*) clear {
  self.resultErrorCommand = [[ErrorCommand alloc] init];
  return self;
}
- (ErrorCommandBuilder*) clone {
  return [ErrorCommand builderWithPrototype:resultErrorCommand];
}
- (ErrorCommand*) defaultInstance {
  return [ErrorCommand defaultInstance];
}
- (ErrorCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ErrorCommand*) buildPartial {
  ErrorCommand* returnMe = resultErrorCommand;
  self.resultErrorCommand = nil;
  return returnMe;
}
- (ErrorCommandBuilder*) mergeFrom:(ErrorCommand*) other {
  if (other == [ErrorCommand defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasAppCode) {
    [self setAppCode:other.appCode];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ErrorCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ErrorCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCode:[input readInt32]];
        break;
      }
      case 18: {
        [self setReason:[input readString]];
        break;
      }
      case 24: {
        [self setAppCode:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return resultErrorCommand.hasCode;
}
- (SInt32) code {
  return resultErrorCommand.code;
}
- (ErrorCommandBuilder*) setCode:(SInt32) value {
  resultErrorCommand.hasCode = YES;
  resultErrorCommand.code = value;
  return self;
}
- (ErrorCommandBuilder*) clearCode {
  resultErrorCommand.hasCode = NO;
  resultErrorCommand.code = 0;
  return self;
}
- (BOOL) hasReason {
  return resultErrorCommand.hasReason;
}
- (NSString*) reason {
  return resultErrorCommand.reason;
}
- (ErrorCommandBuilder*) setReason:(NSString*) value {
  resultErrorCommand.hasReason = YES;
  resultErrorCommand.reason = value;
  return self;
}
- (ErrorCommandBuilder*) clearReason {
  resultErrorCommand.hasReason = NO;
  resultErrorCommand.reason = @"";
  return self;
}
- (BOOL) hasAppCode {
  return resultErrorCommand.hasAppCode;
}
- (SInt32) appCode {
  return resultErrorCommand.appCode;
}
- (ErrorCommandBuilder*) setAppCode:(SInt32) value {
  resultErrorCommand.hasAppCode = YES;
  resultErrorCommand.appCode = value;
  return self;
}
- (ErrorCommandBuilder*) clearAppCode {
  resultErrorCommand.hasAppCode = NO;
  resultErrorCommand.appCode = 0;
  return self;
}
@end

@interface DirectCommand ()
@property (strong) NSString* msg;
@property (strong) NSString* uid;
@property (strong) NSString* fromPeerId;
@property SInt64 timestamp;
@property BOOL offline;
@property BOOL hasMore;
@property (strong) NSMutableArray * toPeerIdsArray;
@property BOOL r;
@property (strong) NSString* cid;
@property (strong) NSString* id;
@property BOOL transient;
@property (strong) NSString* dt;
@end

@implementation DirectCommand

- (BOOL) hasMsg {
  return !!hasMsg_;
}
- (void) setHasMsg:(BOOL) _value_ {
  hasMsg_ = !!_value_;
}
@synthesize msg;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasFromPeerId {
  return !!hasFromPeerId_;
}
- (void) setHasFromPeerId:(BOOL) _value_ {
  hasFromPeerId_ = !!_value_;
}
@synthesize fromPeerId;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasOffline {
  return !!hasOffline_;
}
- (void) setHasOffline:(BOOL) _value_ {
  hasOffline_ = !!_value_;
}
- (BOOL) offline {
  return !!offline_;
}
- (void) setOffline:(BOOL) _value_ {
  offline_ = !!_value_;
}
- (BOOL) hasHasMore {
  return !!hasHasMore_;
}
- (void) setHasHasMore:(BOOL) _value_ {
  hasHasMore_ = !!_value_;
}
- (BOOL) hasMore {
  return !!hasMore_;
}
- (void) setHasMore:(BOOL) _value_ {
  hasMore_ = !!_value_;
}
@synthesize toPeerIdsArray;
@dynamic toPeerIds;
- (BOOL) hasR {
  return !!hasR_;
}
- (void) setHasR:(BOOL) _value_ {
  hasR_ = !!_value_;
}
- (BOOL) r {
  return !!r_;
}
- (void) setR:(BOOL) _value_ {
  r_ = !!_value_;
}
- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasTransient {
  return !!hasTransient_;
}
- (void) setHasTransient:(BOOL) _value_ {
  hasTransient_ = !!_value_;
}
- (BOOL) transient {
  return !!transient_;
}
- (void) setTransient:(BOOL) _value_ {
  transient_ = !!_value_;
}
- (BOOL) hasDt {
  return !!hasDt_;
}
- (void) setHasDt:(BOOL) _value_ {
  hasDt_ = !!_value_;
}
@synthesize dt;
- (instancetype) init {
  if ((self = [super init])) {
    self.msg = @"";
    self.uid = @"";
    self.fromPeerId = @"";
    self.timestamp = 0L;
    self.offline = NO;
    self.hasMore = NO;
    self.r = NO;
    self.cid = @"";
    self.id = @"";
    self.transient = NO;
    self.dt = @"";
  }
  return self;
}
static DirectCommand* defaultDirectCommandInstance = nil;
+ (void) initialize {
  if (self == [DirectCommand class]) {
    defaultDirectCommandInstance = [[DirectCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultDirectCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultDirectCommandInstance;
}
- (NSArray *)toPeerIds {
  return toPeerIdsArray;
}
- (NSString*)toPeerIdsAtIndex:(NSUInteger)index {
  return [toPeerIdsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasMsg) {
    [output writeString:1 value:self.msg];
  }
  if (self.hasUid) {
    [output writeString:2 value:self.uid];
  }
  if (self.hasFromPeerId) {
    [output writeString:3 value:self.fromPeerId];
  }
  if (self.hasTimestamp) {
    [output writeInt64:4 value:self.timestamp];
  }
  if (self.hasOffline) {
    [output writeBool:5 value:self.offline];
  }
  if (self.hasHasMore) {
    [output writeBool:6 value:self.hasMore];
  }
  [self.toPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:7 value:element];
  }];
  if (self.hasR) {
    [output writeBool:10 value:self.r];
  }
  if (self.hasCid) {
    [output writeString:11 value:self.cid];
  }
  if (self.hasId) {
    [output writeString:12 value:self.id];
  }
  if (self.hasTransient) {
    [output writeBool:13 value:self.transient];
  }
  if (self.hasDt) {
    [output writeString:14 value:self.dt];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasMsg) {
    size_ += computeStringSize(1, self.msg);
  }
  if (self.hasUid) {
    size_ += computeStringSize(2, self.uid);
  }
  if (self.hasFromPeerId) {
    size_ += computeStringSize(3, self.fromPeerId);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(4, self.timestamp);
  }
  if (self.hasOffline) {
    size_ += computeBoolSize(5, self.offline);
  }
  if (self.hasHasMore) {
    size_ += computeBoolSize(6, self.hasMore);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.toPeerIdsArray.count;
    [self.toPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasR) {
    size_ += computeBoolSize(10, self.r);
  }
  if (self.hasCid) {
    size_ += computeStringSize(11, self.cid);
  }
  if (self.hasId) {
    size_ += computeStringSize(12, self.id);
  }
  if (self.hasTransient) {
    size_ += computeBoolSize(13, self.transient);
  }
  if (self.hasDt) {
    size_ += computeStringSize(14, self.dt);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DirectCommand*) parseFromData:(NSData*) data {
  return (DirectCommand*)[[[DirectCommand builder] mergeFromData:data] build];
}
+ (DirectCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DirectCommand*)[[[DirectCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (DirectCommand*) parseFromInputStream:(NSInputStream*) input {
  return (DirectCommand*)[[[DirectCommand builder] mergeFromInputStream:input] build];
}
+ (DirectCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DirectCommand*)[[[DirectCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DirectCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (DirectCommand*)[[[DirectCommand builder] mergeFromCodedInputStream:input] build];
}
+ (DirectCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (DirectCommand*)[[[DirectCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (DirectCommandBuilder*) builder {
  return [[DirectCommandBuilder alloc] init];
}
+ (DirectCommandBuilder*) builderWithPrototype:(DirectCommand*) prototype {
  return [[DirectCommand builder] mergeFrom:prototype];
}
- (DirectCommandBuilder*) builder {
  return [DirectCommand builder];
}
- (DirectCommandBuilder*) toBuilder {
  return [DirectCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"msg", self.msg];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", self.uid];
  }
  if (self.hasFromPeerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromPeerId", self.fromPeerId];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasOffline) {
    [output appendFormat:@"%@%@: %@\n", indent, @"offline", [NSNumber numberWithBool:self.offline]];
  }
  if (self.hasHasMore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasMore", [NSNumber numberWithBool:self.hasMore]];
  }
  [self.toPeerIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"toPeerIds", obj];
  }];
  if (self.hasR) {
    [output appendFormat:@"%@%@: %@\n", indent, @"r", [NSNumber numberWithBool:self.r]];
  }
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasTransient) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transient", [NSNumber numberWithBool:self.transient]];
  }
  if (self.hasDt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"dt", self.dt];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasMsg) {
    [dictionary setObject: self.msg forKey: @"msg"];
  }
  if (self.hasUid) {
    [dictionary setObject: self.uid forKey: @"uid"];
  }
  if (self.hasFromPeerId) {
    [dictionary setObject: self.fromPeerId forKey: @"fromPeerId"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasOffline) {
    [dictionary setObject: [NSNumber numberWithBool:self.offline] forKey: @"offline"];
  }
  if (self.hasHasMore) {
    [dictionary setObject: [NSNumber numberWithBool:self.hasMore] forKey: @"hasMore"];
  }
  [dictionary setObject:self.toPeerIds forKey: @"toPeerIds"];
  if (self.hasR) {
    [dictionary setObject: [NSNumber numberWithBool:self.r] forKey: @"r"];
  }
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasTransient) {
    [dictionary setObject: [NSNumber numberWithBool:self.transient] forKey: @"transient"];
  }
  if (self.hasDt) {
    [dictionary setObject: self.dt forKey: @"dt"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[DirectCommand class]]) {
    return NO;
  }
  DirectCommand *otherMessage = other;
  return
      self.hasMsg == otherMessage.hasMsg &&
      (!self.hasMsg || [self.msg isEqual:otherMessage.msg]) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || [self.uid isEqual:otherMessage.uid]) &&
      self.hasFromPeerId == otherMessage.hasFromPeerId &&
      (!self.hasFromPeerId || [self.fromPeerId isEqual:otherMessage.fromPeerId]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasOffline == otherMessage.hasOffline &&
      (!self.hasOffline || self.offline == otherMessage.offline) &&
      self.hasHasMore == otherMessage.hasHasMore &&
      (!self.hasHasMore || self.hasMore == otherMessage.hasMore) &&
      [self.toPeerIdsArray isEqualToArray:otherMessage.toPeerIdsArray] &&
      self.hasR == otherMessage.hasR &&
      (!self.hasR || self.r == otherMessage.r) &&
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasTransient == otherMessage.hasTransient &&
      (!self.hasTransient || self.transient == otherMessage.transient) &&
      self.hasDt == otherMessage.hasDt &&
      (!self.hasDt || [self.dt isEqual:otherMessage.dt]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasMsg) {
    hashCode = hashCode * 31 + [self.msg hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [self.uid hash];
  }
  if (self.hasFromPeerId) {
    hashCode = hashCode * 31 + [self.fromPeerId hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasOffline) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.offline] hash];
  }
  if (self.hasHasMore) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.hasMore] hash];
  }
  [self.toPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasR) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.r] hash];
  }
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasTransient) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.transient] hash];
  }
  if (self.hasDt) {
    hashCode = hashCode * 31 + [self.dt hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface DirectCommandBuilder()
@property (strong) DirectCommand* resultDirectCommand;
@end

@implementation DirectCommandBuilder
@synthesize resultDirectCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultDirectCommand = [[DirectCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultDirectCommand;
}
- (DirectCommandBuilder*) clear {
  self.resultDirectCommand = [[DirectCommand alloc] init];
  return self;
}
- (DirectCommandBuilder*) clone {
  return [DirectCommand builderWithPrototype:resultDirectCommand];
}
- (DirectCommand*) defaultInstance {
  return [DirectCommand defaultInstance];
}
- (DirectCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (DirectCommand*) buildPartial {
  DirectCommand* returnMe = resultDirectCommand;
  self.resultDirectCommand = nil;
  return returnMe;
}
- (DirectCommandBuilder*) mergeFrom:(DirectCommand*) other {
  if (other == [DirectCommand defaultInstance]) {
    return self;
  }
  if (other.hasMsg) {
    [self setMsg:other.msg];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasFromPeerId) {
    [self setFromPeerId:other.fromPeerId];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasOffline) {
    [self setOffline:other.offline];
  }
  if (other.hasHasMore) {
    [self setHasMore:other.hasMore];
  }
  if (other.toPeerIdsArray.count > 0) {
    if (resultDirectCommand.toPeerIdsArray == nil) {
      resultDirectCommand.toPeerIdsArray = [[NSMutableArray alloc] initWithArray:other.toPeerIdsArray];
    } else {
      [resultDirectCommand.toPeerIdsArray addObjectsFromArray:other.toPeerIdsArray];
    }
  }
  if (other.hasR) {
    [self setR:other.r];
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasTransient) {
    [self setTransient:other.transient];
  }
  if (other.hasDt) {
    [self setDt:other.dt];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (DirectCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (DirectCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setMsg:[input readString]];
        break;
      }
      case 18: {
        [self setUid:[input readString]];
        break;
      }
      case 26: {
        [self setFromPeerId:[input readString]];
        break;
      }
      case 32: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 40: {
        [self setOffline:[input readBool]];
        break;
      }
      case 48: {
        [self setHasMore:[input readBool]];
        break;
      }
      case 58: {
        [self addToPeerIds:[input readString]];
        break;
      }
      case 80: {
        [self setR:[input readBool]];
        break;
      }
      case 90: {
        [self setCid:[input readString]];
        break;
      }
      case 98: {
        [self setId:[input readString]];
        break;
      }
      case 104: {
        [self setTransient:[input readBool]];
        break;
      }
      case 114: {
        [self setDt:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasMsg {
  return resultDirectCommand.hasMsg;
}
- (NSString*) msg {
  return resultDirectCommand.msg;
}
- (DirectCommandBuilder*) setMsg:(NSString*) value {
  resultDirectCommand.hasMsg = YES;
  resultDirectCommand.msg = value;
  return self;
}
- (DirectCommandBuilder*) clearMsg {
  resultDirectCommand.hasMsg = NO;
  resultDirectCommand.msg = @"";
  return self;
}
- (BOOL) hasUid {
  return resultDirectCommand.hasUid;
}
- (NSString*) uid {
  return resultDirectCommand.uid;
}
- (DirectCommandBuilder*) setUid:(NSString*) value {
  resultDirectCommand.hasUid = YES;
  resultDirectCommand.uid = value;
  return self;
}
- (DirectCommandBuilder*) clearUid {
  resultDirectCommand.hasUid = NO;
  resultDirectCommand.uid = @"";
  return self;
}
- (BOOL) hasFromPeerId {
  return resultDirectCommand.hasFromPeerId;
}
- (NSString*) fromPeerId {
  return resultDirectCommand.fromPeerId;
}
- (DirectCommandBuilder*) setFromPeerId:(NSString*) value {
  resultDirectCommand.hasFromPeerId = YES;
  resultDirectCommand.fromPeerId = value;
  return self;
}
- (DirectCommandBuilder*) clearFromPeerId {
  resultDirectCommand.hasFromPeerId = NO;
  resultDirectCommand.fromPeerId = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultDirectCommand.hasTimestamp;
}
- (SInt64) timestamp {
  return resultDirectCommand.timestamp;
}
- (DirectCommandBuilder*) setTimestamp:(SInt64) value {
  resultDirectCommand.hasTimestamp = YES;
  resultDirectCommand.timestamp = value;
  return self;
}
- (DirectCommandBuilder*) clearTimestamp {
  resultDirectCommand.hasTimestamp = NO;
  resultDirectCommand.timestamp = 0L;
  return self;
}
- (BOOL) hasOffline {
  return resultDirectCommand.hasOffline;
}
- (BOOL) offline {
  return resultDirectCommand.offline;
}
- (DirectCommandBuilder*) setOffline:(BOOL) value {
  resultDirectCommand.hasOffline = YES;
  resultDirectCommand.offline = value;
  return self;
}
- (DirectCommandBuilder*) clearOffline {
  resultDirectCommand.hasOffline = NO;
  resultDirectCommand.offline = NO;
  return self;
}
- (BOOL) hasHasMore {
  return resultDirectCommand.hasHasMore;
}
- (BOOL) hasMore {
  return resultDirectCommand.hasMore;
}
- (DirectCommandBuilder*) setHasMore:(BOOL) value {
  resultDirectCommand.hasHasMore = YES;
  resultDirectCommand.hasMore = value;
  return self;
}
- (DirectCommandBuilder*) clearHasMore {
  resultDirectCommand.hasHasMore = NO;
  resultDirectCommand.hasMore = NO;
  return self;
}
- (NSMutableArray *)toPeerIds {
  return resultDirectCommand.toPeerIdsArray;
}
- (NSString*)toPeerIdsAtIndex:(NSUInteger)index {
  return [resultDirectCommand toPeerIdsAtIndex:index];
}
- (DirectCommandBuilder *)addToPeerIds:(NSString*)value {
  if (resultDirectCommand.toPeerIdsArray == nil) {
    resultDirectCommand.toPeerIdsArray = [[NSMutableArray alloc]init];
  }
  [resultDirectCommand.toPeerIdsArray addObject:value];
  return self;
}
- (DirectCommandBuilder *)setToPeerIdsArray:(NSArray *)array {
  resultDirectCommand.toPeerIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (DirectCommandBuilder *)clearToPeerIds {
  resultDirectCommand.toPeerIdsArray = nil;
  return self;
}
- (BOOL) hasR {
  return resultDirectCommand.hasR;
}
- (BOOL) r {
  return resultDirectCommand.r;
}
- (DirectCommandBuilder*) setR:(BOOL) value {
  resultDirectCommand.hasR = YES;
  resultDirectCommand.r = value;
  return self;
}
- (DirectCommandBuilder*) clearR {
  resultDirectCommand.hasR = NO;
  resultDirectCommand.r = NO;
  return self;
}
- (BOOL) hasCid {
  return resultDirectCommand.hasCid;
}
- (NSString*) cid {
  return resultDirectCommand.cid;
}
- (DirectCommandBuilder*) setCid:(NSString*) value {
  resultDirectCommand.hasCid = YES;
  resultDirectCommand.cid = value;
  return self;
}
- (DirectCommandBuilder*) clearCid {
  resultDirectCommand.hasCid = NO;
  resultDirectCommand.cid = @"";
  return self;
}
- (BOOL) hasId {
  return resultDirectCommand.hasId;
}
- (NSString*) id {
  return resultDirectCommand.id;
}
- (DirectCommandBuilder*) setId:(NSString*) value {
  resultDirectCommand.hasId = YES;
  resultDirectCommand.id = value;
  return self;
}
- (DirectCommandBuilder*) clearId {
  resultDirectCommand.hasId = NO;
  resultDirectCommand.id = @"";
  return self;
}
- (BOOL) hasTransient {
  return resultDirectCommand.hasTransient;
}
- (BOOL) transient {
  return resultDirectCommand.transient;
}
- (DirectCommandBuilder*) setTransient:(BOOL) value {
  resultDirectCommand.hasTransient = YES;
  resultDirectCommand.transient = value;
  return self;
}
- (DirectCommandBuilder*) clearTransient {
  resultDirectCommand.hasTransient = NO;
  resultDirectCommand.transient = NO;
  return self;
}
- (BOOL) hasDt {
  return resultDirectCommand.hasDt;
}
- (NSString*) dt {
  return resultDirectCommand.dt;
}
- (DirectCommandBuilder*) setDt:(NSString*) value {
  resultDirectCommand.hasDt = YES;
  resultDirectCommand.dt = value;
  return self;
}
- (DirectCommandBuilder*) clearDt {
  resultDirectCommand.hasDt = NO;
  resultDirectCommand.dt = @"";
  return self;
}
@end

@interface AckCommand ()
@property SInt32 code;
@property (strong) NSString* reason;
@property (strong) NSString* mid;
@property (strong) NSString* cid;
@property SInt64 timestamp;
@property (strong) NSString* uid;
@property SInt64 fromts;
@property SInt64 tots;
@property (strong) NSString* type;
@property (strong) NSMutableArray * idsArray;
@end

@implementation AckCommand

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) _value_ {
  hasCode_ = !!_value_;
}
@synthesize code;
- (BOOL) hasReason {
  return !!hasReason_;
}
- (void) setHasReason:(BOOL) _value_ {
  hasReason_ = !!_value_;
}
@synthesize reason;
- (BOOL) hasMid {
  return !!hasMid_;
}
- (void) setHasMid:(BOOL) _value_ {
  hasMid_ = !!_value_;
}
@synthesize mid;
- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasTimestamp {
  return !!hasTimestamp_;
}
- (void) setHasTimestamp:(BOOL) _value_ {
  hasTimestamp_ = !!_value_;
}
@synthesize timestamp;
- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasFromts {
  return !!hasFromts_;
}
- (void) setHasFromts:(BOOL) _value_ {
  hasFromts_ = !!_value_;
}
@synthesize fromts;
- (BOOL) hasTots {
  return !!hasTots_;
}
- (void) setHasTots:(BOOL) _value_ {
  hasTots_ = !!_value_;
}
@synthesize tots;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
@synthesize idsArray;
@dynamic ids;
- (instancetype) init {
  if ((self = [super init])) {
    self.code = 0;
    self.reason = @"";
    self.mid = @"";
    self.cid = @"";
    self.timestamp = 0L;
    self.uid = @"";
    self.fromts = 0L;
    self.tots = 0L;
    self.type = @"";
  }
  return self;
}
static AckCommand* defaultAckCommandInstance = nil;
+ (void) initialize {
  if (self == [AckCommand class]) {
    defaultAckCommandInstance = [[AckCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAckCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultAckCommandInstance;
}
- (NSArray *)ids {
  return idsArray;
}
- (NSString*)idsAtIndex:(NSUInteger)index {
  return [idsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeInt32:1 value:self.code];
  }
  if (self.hasReason) {
    [output writeString:2 value:self.reason];
  }
  if (self.hasMid) {
    [output writeString:3 value:self.mid];
  }
  if (self.hasCid) {
    [output writeString:4 value:self.cid];
  }
  if (self.hasTimestamp) {
    [output writeInt64:5 value:self.timestamp];
  }
  if (self.hasUid) {
    [output writeString:6 value:self.uid];
  }
  if (self.hasFromts) {
    [output writeInt64:7 value:self.fromts];
  }
  if (self.hasTots) {
    [output writeInt64:8 value:self.tots];
  }
  if (self.hasType) {
    [output writeString:9 value:self.type];
  }
  [self.idsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:10 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCode) {
    size_ += computeInt32Size(1, self.code);
  }
  if (self.hasReason) {
    size_ += computeStringSize(2, self.reason);
  }
  if (self.hasMid) {
    size_ += computeStringSize(3, self.mid);
  }
  if (self.hasCid) {
    size_ += computeStringSize(4, self.cid);
  }
  if (self.hasTimestamp) {
    size_ += computeInt64Size(5, self.timestamp);
  }
  if (self.hasUid) {
    size_ += computeStringSize(6, self.uid);
  }
  if (self.hasFromts) {
    size_ += computeInt64Size(7, self.fromts);
  }
  if (self.hasTots) {
    size_ += computeInt64Size(8, self.tots);
  }
  if (self.hasType) {
    size_ += computeStringSize(9, self.type);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.idsArray.count;
    [self.idsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (AckCommand*) parseFromData:(NSData*) data {
  return (AckCommand*)[[[AckCommand builder] mergeFromData:data] build];
}
+ (AckCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AckCommand*)[[[AckCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AckCommand*) parseFromInputStream:(NSInputStream*) input {
  return (AckCommand*)[[[AckCommand builder] mergeFromInputStream:input] build];
}
+ (AckCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AckCommand*)[[[AckCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AckCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AckCommand*)[[[AckCommand builder] mergeFromCodedInputStream:input] build];
}
+ (AckCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AckCommand*)[[[AckCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AckCommandBuilder*) builder {
  return [[AckCommandBuilder alloc] init];
}
+ (AckCommandBuilder*) builderWithPrototype:(AckCommand*) prototype {
  return [[AckCommand builder] mergeFrom:prototype];
}
- (AckCommandBuilder*) builder {
  return [AckCommand builder];
}
- (AckCommandBuilder*) toBuilder {
  return [AckCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", [NSNumber numberWithInteger:self.code]];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasMid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mid", self.mid];
  }
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasTimestamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timestamp", [NSNumber numberWithLongLong:self.timestamp]];
  }
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", self.uid];
  }
  if (self.hasFromts) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromts", [NSNumber numberWithLongLong:self.fromts]];
  }
  if (self.hasTots) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tots", [NSNumber numberWithLongLong:self.tots]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  [self.idsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ids", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.code] forKey: @"code"];
  }
  if (self.hasReason) {
    [dictionary setObject: self.reason forKey: @"reason"];
  }
  if (self.hasMid) {
    [dictionary setObject: self.mid forKey: @"mid"];
  }
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasTimestamp) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.timestamp] forKey: @"timestamp"];
  }
  if (self.hasUid) {
    [dictionary setObject: self.uid forKey: @"uid"];
  }
  if (self.hasFromts) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.fromts] forKey: @"fromts"];
  }
  if (self.hasTots) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.tots] forKey: @"tots"];
  }
  if (self.hasType) {
    [dictionary setObject: self.type forKey: @"type"];
  }
  [dictionary setObject:self.ids forKey: @"ids"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[AckCommand class]]) {
    return NO;
  }
  AckCommand *otherMessage = other;
  return
      self.hasCode == otherMessage.hasCode &&
      (!self.hasCode || self.code == otherMessage.code) &&
      self.hasReason == otherMessage.hasReason &&
      (!self.hasReason || [self.reason isEqual:otherMessage.reason]) &&
      self.hasMid == otherMessage.hasMid &&
      (!self.hasMid || [self.mid isEqual:otherMessage.mid]) &&
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasTimestamp == otherMessage.hasTimestamp &&
      (!self.hasTimestamp || self.timestamp == otherMessage.timestamp) &&
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || [self.uid isEqual:otherMessage.uid]) &&
      self.hasFromts == otherMessage.hasFromts &&
      (!self.hasFromts || self.fromts == otherMessage.fromts) &&
      self.hasTots == otherMessage.hasTots &&
      (!self.hasTots || self.tots == otherMessage.tots) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      [self.idsArray isEqualToArray:otherMessage.idsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.code] hash];
  }
  if (self.hasReason) {
    hashCode = hashCode * 31 + [self.reason hash];
  }
  if (self.hasMid) {
    hashCode = hashCode * 31 + [self.mid hash];
  }
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasTimestamp) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.timestamp] hash];
  }
  if (self.hasUid) {
    hashCode = hashCode * 31 + [self.uid hash];
  }
  if (self.hasFromts) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.fromts] hash];
  }
  if (self.hasTots) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.tots] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  [self.idsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AckCommandBuilder()
@property (strong) AckCommand* resultAckCommand;
@end

@implementation AckCommandBuilder
@synthesize resultAckCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAckCommand = [[AckCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAckCommand;
}
- (AckCommandBuilder*) clear {
  self.resultAckCommand = [[AckCommand alloc] init];
  return self;
}
- (AckCommandBuilder*) clone {
  return [AckCommand builderWithPrototype:resultAckCommand];
}
- (AckCommand*) defaultInstance {
  return [AckCommand defaultInstance];
}
- (AckCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AckCommand*) buildPartial {
  AckCommand* returnMe = resultAckCommand;
  self.resultAckCommand = nil;
  return returnMe;
}
- (AckCommandBuilder*) mergeFrom:(AckCommand*) other {
  if (other == [AckCommand defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasReason) {
    [self setReason:other.reason];
  }
  if (other.hasMid) {
    [self setMid:other.mid];
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasTimestamp) {
    [self setTimestamp:other.timestamp];
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasFromts) {
    [self setFromts:other.fromts];
  }
  if (other.hasTots) {
    [self setTots:other.tots];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.idsArray.count > 0) {
    if (resultAckCommand.idsArray == nil) {
      resultAckCommand.idsArray = [[NSMutableArray alloc] initWithArray:other.idsArray];
    } else {
      [resultAckCommand.idsArray addObjectsFromArray:other.idsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AckCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AckCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCode:[input readInt32]];
        break;
      }
      case 18: {
        [self setReason:[input readString]];
        break;
      }
      case 26: {
        [self setMid:[input readString]];
        break;
      }
      case 34: {
        [self setCid:[input readString]];
        break;
      }
      case 40: {
        [self setTimestamp:[input readInt64]];
        break;
      }
      case 50: {
        [self setUid:[input readString]];
        break;
      }
      case 56: {
        [self setFromts:[input readInt64]];
        break;
      }
      case 64: {
        [self setTots:[input readInt64]];
        break;
      }
      case 74: {
        [self setType:[input readString]];
        break;
      }
      case 82: {
        [self addIds:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return resultAckCommand.hasCode;
}
- (SInt32) code {
  return resultAckCommand.code;
}
- (AckCommandBuilder*) setCode:(SInt32) value {
  resultAckCommand.hasCode = YES;
  resultAckCommand.code = value;
  return self;
}
- (AckCommandBuilder*) clearCode {
  resultAckCommand.hasCode = NO;
  resultAckCommand.code = 0;
  return self;
}
- (BOOL) hasReason {
  return resultAckCommand.hasReason;
}
- (NSString*) reason {
  return resultAckCommand.reason;
}
- (AckCommandBuilder*) setReason:(NSString*) value {
  resultAckCommand.hasReason = YES;
  resultAckCommand.reason = value;
  return self;
}
- (AckCommandBuilder*) clearReason {
  resultAckCommand.hasReason = NO;
  resultAckCommand.reason = @"";
  return self;
}
- (BOOL) hasMid {
  return resultAckCommand.hasMid;
}
- (NSString*) mid {
  return resultAckCommand.mid;
}
- (AckCommandBuilder*) setMid:(NSString*) value {
  resultAckCommand.hasMid = YES;
  resultAckCommand.mid = value;
  return self;
}
- (AckCommandBuilder*) clearMid {
  resultAckCommand.hasMid = NO;
  resultAckCommand.mid = @"";
  return self;
}
- (BOOL) hasCid {
  return resultAckCommand.hasCid;
}
- (NSString*) cid {
  return resultAckCommand.cid;
}
- (AckCommandBuilder*) setCid:(NSString*) value {
  resultAckCommand.hasCid = YES;
  resultAckCommand.cid = value;
  return self;
}
- (AckCommandBuilder*) clearCid {
  resultAckCommand.hasCid = NO;
  resultAckCommand.cid = @"";
  return self;
}
- (BOOL) hasTimestamp {
  return resultAckCommand.hasTimestamp;
}
- (SInt64) timestamp {
  return resultAckCommand.timestamp;
}
- (AckCommandBuilder*) setTimestamp:(SInt64) value {
  resultAckCommand.hasTimestamp = YES;
  resultAckCommand.timestamp = value;
  return self;
}
- (AckCommandBuilder*) clearTimestamp {
  resultAckCommand.hasTimestamp = NO;
  resultAckCommand.timestamp = 0L;
  return self;
}
- (BOOL) hasUid {
  return resultAckCommand.hasUid;
}
- (NSString*) uid {
  return resultAckCommand.uid;
}
- (AckCommandBuilder*) setUid:(NSString*) value {
  resultAckCommand.hasUid = YES;
  resultAckCommand.uid = value;
  return self;
}
- (AckCommandBuilder*) clearUid {
  resultAckCommand.hasUid = NO;
  resultAckCommand.uid = @"";
  return self;
}
- (BOOL) hasFromts {
  return resultAckCommand.hasFromts;
}
- (SInt64) fromts {
  return resultAckCommand.fromts;
}
- (AckCommandBuilder*) setFromts:(SInt64) value {
  resultAckCommand.hasFromts = YES;
  resultAckCommand.fromts = value;
  return self;
}
- (AckCommandBuilder*) clearFromts {
  resultAckCommand.hasFromts = NO;
  resultAckCommand.fromts = 0L;
  return self;
}
- (BOOL) hasTots {
  return resultAckCommand.hasTots;
}
- (SInt64) tots {
  return resultAckCommand.tots;
}
- (AckCommandBuilder*) setTots:(SInt64) value {
  resultAckCommand.hasTots = YES;
  resultAckCommand.tots = value;
  return self;
}
- (AckCommandBuilder*) clearTots {
  resultAckCommand.hasTots = NO;
  resultAckCommand.tots = 0L;
  return self;
}
- (BOOL) hasType {
  return resultAckCommand.hasType;
}
- (NSString*) type {
  return resultAckCommand.type;
}
- (AckCommandBuilder*) setType:(NSString*) value {
  resultAckCommand.hasType = YES;
  resultAckCommand.type = value;
  return self;
}
- (AckCommandBuilder*) clearType {
  resultAckCommand.hasType = NO;
  resultAckCommand.type = @"";
  return self;
}
- (NSMutableArray *)ids {
  return resultAckCommand.idsArray;
}
- (NSString*)idsAtIndex:(NSUInteger)index {
  return [resultAckCommand idsAtIndex:index];
}
- (AckCommandBuilder *)addIds:(NSString*)value {
  if (resultAckCommand.idsArray == nil) {
    resultAckCommand.idsArray = [[NSMutableArray alloc]init];
  }
  [resultAckCommand.idsArray addObject:value];
  return self;
}
- (AckCommandBuilder *)setIdsArray:(NSArray *)array {
  resultAckCommand.idsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (AckCommandBuilder *)clearIds {
  resultAckCommand.idsArray = nil;
  return self;
}
@end

@interface UnreadCommand ()
@property (strong) NSMutableArray * convsArray;
@end

@implementation UnreadCommand

@synthesize convsArray;
@dynamic convs;
- (instancetype) init {
  if ((self = [super init])) {
  }
  return self;
}
static UnreadCommand* defaultUnreadCommandInstance = nil;
+ (void) initialize {
  if (self == [UnreadCommand class]) {
    defaultUnreadCommandInstance = [[UnreadCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUnreadCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultUnreadCommandInstance;
}
- (NSArray *)convs {
  return convsArray;
}
- (UnreadTuple*)convsAtIndex:(NSUInteger)index {
  return [convsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitconvs = YES;
   [self.convs enumerateObjectsUsingBlock:^(UnreadTuple *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitconvs = NO;
      *stop = YES;
    }
  }];
  if (!isInitconvs) return isInitconvs;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.convsArray enumerateObjectsUsingBlock:^(UnreadTuple *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:1 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  [self.convsArray enumerateObjectsUsingBlock:^(UnreadTuple *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(1, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UnreadCommand*) parseFromData:(NSData*) data {
  return (UnreadCommand*)[[[UnreadCommand builder] mergeFromData:data] build];
}
+ (UnreadCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnreadCommand*)[[[UnreadCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UnreadCommand*) parseFromInputStream:(NSInputStream*) input {
  return (UnreadCommand*)[[[UnreadCommand builder] mergeFromInputStream:input] build];
}
+ (UnreadCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnreadCommand*)[[[UnreadCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnreadCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UnreadCommand*)[[[UnreadCommand builder] mergeFromCodedInputStream:input] build];
}
+ (UnreadCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UnreadCommand*)[[[UnreadCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UnreadCommandBuilder*) builder {
  return [[UnreadCommandBuilder alloc] init];
}
+ (UnreadCommandBuilder*) builderWithPrototype:(UnreadCommand*) prototype {
  return [[UnreadCommand builder] mergeFrom:prototype];
}
- (UnreadCommandBuilder*) builder {
  return [UnreadCommand builder];
}
- (UnreadCommandBuilder*) toBuilder {
  return [UnreadCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.convsArray enumerateObjectsUsingBlock:^(UnreadTuple *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"convs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  for (UnreadTuple* element in self.convsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"convs"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UnreadCommand class]]) {
    return NO;
  }
  UnreadCommand *otherMessage = other;
  return
      [self.convsArray isEqualToArray:otherMessage.convsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.convsArray enumerateObjectsUsingBlock:^(UnreadTuple *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UnreadCommandBuilder()
@property (strong) UnreadCommand* resultUnreadCommand;
@end

@implementation UnreadCommandBuilder
@synthesize resultUnreadCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUnreadCommand = [[UnreadCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUnreadCommand;
}
- (UnreadCommandBuilder*) clear {
  self.resultUnreadCommand = [[UnreadCommand alloc] init];
  return self;
}
- (UnreadCommandBuilder*) clone {
  return [UnreadCommand builderWithPrototype:resultUnreadCommand];
}
- (UnreadCommand*) defaultInstance {
  return [UnreadCommand defaultInstance];
}
- (UnreadCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UnreadCommand*) buildPartial {
  UnreadCommand* returnMe = resultUnreadCommand;
  self.resultUnreadCommand = nil;
  return returnMe;
}
- (UnreadCommandBuilder*) mergeFrom:(UnreadCommand*) other {
  if (other == [UnreadCommand defaultInstance]) {
    return self;
  }
  if (other.convsArray.count > 0) {
    if (resultUnreadCommand.convsArray == nil) {
      resultUnreadCommand.convsArray = [[NSMutableArray alloc] initWithArray:other.convsArray];
    } else {
      [resultUnreadCommand.convsArray addObjectsFromArray:other.convsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UnreadCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UnreadCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        UnreadTupleBuilder* subBuilder = [UnreadTuple builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addConvs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)convs {
  return resultUnreadCommand.convsArray;
}
- (UnreadTuple*)convsAtIndex:(NSUInteger)index {
  return [resultUnreadCommand convsAtIndex:index];
}
- (UnreadCommandBuilder *)addConvs:(UnreadTuple*)value {
  if (resultUnreadCommand.convsArray == nil) {
    resultUnreadCommand.convsArray = [[NSMutableArray alloc]init];
  }
  [resultUnreadCommand.convsArray addObject:value];
  return self;
}
- (UnreadCommandBuilder *)setConvsArray:(NSArray *)array {
  resultUnreadCommand.convsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (UnreadCommandBuilder *)clearConvs {
  resultUnreadCommand.convsArray = nil;
  return self;
}
@end

@interface ConvCommand ()
@property (strong) NSMutableArray * mArray;
@property BOOL transient;
@property BOOL unique;
@property (strong) NSString* cid;
@property (strong) NSString* cdate;
@property (strong) NSString* createdBy;
@property (strong) NSString* sort;
@property SInt32 limit;
@property SInt32 skip;
@property SInt32 flag;
@property SInt32 count;
@property (strong) NSString* udate;
@property SInt64 t;
@property (strong) NSString* n;
@property (strong) NSString* s;
@property (strong) JsonObjectMessage* results;
@property (strong) JsonObjectMessage* where;
@property (strong) JsonObjectMessage* attr;
@end

@implementation ConvCommand

@synthesize mArray;
@dynamic m;
- (BOOL) hasTransient {
  return !!hasTransient_;
}
- (void) setHasTransient:(BOOL) _value_ {
  hasTransient_ = !!_value_;
}
- (BOOL) transient {
  return !!transient_;
}
- (void) setTransient:(BOOL) _value_ {
  transient_ = !!_value_;
}
- (BOOL) hasUnique {
  return !!hasUnique_;
}
- (void) setHasUnique:(BOOL) _value_ {
  hasUnique_ = !!_value_;
}
- (BOOL) unique {
  return !!unique_;
}
- (void) setUnique:(BOOL) _value_ {
  unique_ = !!_value_;
}
- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasCdate {
  return !!hasCdate_;
}
- (void) setHasCdate:(BOOL) _value_ {
  hasCdate_ = !!_value_;
}
@synthesize cdate;
- (BOOL) hasCreatedBy {
  return !!hasCreatedBy_;
}
- (void) setHasCreatedBy:(BOOL) _value_ {
  hasCreatedBy_ = !!_value_;
}
@synthesize createdBy;
- (BOOL) hasSort {
  return !!hasSort_;
}
- (void) setHasSort:(BOOL) _value_ {
  hasSort_ = !!_value_;
}
@synthesize sort;
- (BOOL) hasLimit {
  return !!hasLimit_;
}
- (void) setHasLimit:(BOOL) _value_ {
  hasLimit_ = !!_value_;
}
@synthesize limit;
- (BOOL) hasSkip {
  return !!hasSkip_;
}
- (void) setHasSkip:(BOOL) _value_ {
  hasSkip_ = !!_value_;
}
@synthesize skip;
- (BOOL) hasFlag {
  return !!hasFlag_;
}
- (void) setHasFlag:(BOOL) _value_ {
  hasFlag_ = !!_value_;
}
@synthesize flag;
- (BOOL) hasCount {
  return !!hasCount_;
}
- (void) setHasCount:(BOOL) _value_ {
  hasCount_ = !!_value_;
}
@synthesize count;
- (BOOL) hasUdate {
  return !!hasUdate_;
}
- (void) setHasUdate:(BOOL) _value_ {
  hasUdate_ = !!_value_;
}
@synthesize udate;
- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (BOOL) hasN {
  return !!hasN_;
}
- (void) setHasN:(BOOL) _value_ {
  hasN_ = !!_value_;
}
@synthesize n;
- (BOOL) hasS {
  return !!hasS_;
}
- (void) setHasS:(BOOL) _value_ {
  hasS_ = !!_value_;
}
@synthesize s;
- (BOOL) hasResults {
  return !!hasResults_;
}
- (void) setHasResults:(BOOL) _value_ {
  hasResults_ = !!_value_;
}
@synthesize results;
- (BOOL) hasWhere {
  return !!hasWhere_;
}
- (void) setHasWhere:(BOOL) _value_ {
  hasWhere_ = !!_value_;
}
@synthesize where;
- (BOOL) hasAttr {
  return !!hasAttr_;
}
- (void) setHasAttr:(BOOL) _value_ {
  hasAttr_ = !!_value_;
}
@synthesize attr;
- (instancetype) init {
  if ((self = [super init])) {
    self.transient = NO;
    self.unique = NO;
    self.cid = @"";
    self.cdate = @"";
    self.createdBy = @"";
    self.sort = @"";
    self.limit = 0;
    self.skip = 0;
    self.flag = 0;
    self.count = 0;
    self.udate = @"";
    self.t = 0L;
    self.n = @"";
    self.s = @"";
    self.results = [JsonObjectMessage defaultInstance];
    self.where = [JsonObjectMessage defaultInstance];
    self.attr = [JsonObjectMessage defaultInstance];
  }
  return self;
}
static ConvCommand* defaultConvCommandInstance = nil;
+ (void) initialize {
  if (self == [ConvCommand class]) {
    defaultConvCommandInstance = [[ConvCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultConvCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultConvCommandInstance;
}
- (NSArray *)m {
  return mArray;
}
- (NSString*)mAtIndex:(NSUInteger)index {
  return [mArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (self.hasResults) {
    if (!self.results.isInitialized) {
      return NO;
    }
  }
  if (self.hasWhere) {
    if (!self.where.isInitialized) {
      return NO;
    }
  }
  if (self.hasAttr) {
    if (!self.attr.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  [self.mArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:1 value:element];
  }];
  if (self.hasTransient) {
    [output writeBool:2 value:self.transient];
  }
  if (self.hasUnique) {
    [output writeBool:3 value:self.unique];
  }
  if (self.hasCid) {
    [output writeString:4 value:self.cid];
  }
  if (self.hasCdate) {
    [output writeString:5 value:self.cdate];
  }
  if (self.hasCreatedBy) {
    [output writeString:6 value:self.createdBy];
  }
  if (self.hasSort) {
    [output writeString:7 value:self.sort];
  }
  if (self.hasLimit) {
    [output writeInt32:8 value:self.limit];
  }
  if (self.hasSkip) {
    [output writeInt32:9 value:self.skip];
  }
  if (self.hasFlag) {
    [output writeInt32:10 value:self.flag];
  }
  if (self.hasCount) {
    [output writeInt32:11 value:self.count];
  }
  if (self.hasUdate) {
    [output writeString:12 value:self.udate];
  }
  if (self.hasT) {
    [output writeInt64:13 value:self.t];
  }
  if (self.hasN) {
    [output writeString:14 value:self.n];
  }
  if (self.hasS) {
    [output writeString:15 value:self.s];
  }
  if (self.hasResults) {
    [output writeMessage:100 value:self.results];
  }
  if (self.hasWhere) {
    [output writeMessage:101 value:self.where];
  }
  if (self.hasAttr) {
    [output writeMessage:103 value:self.attr];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.mArray.count;
    [self.mArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasTransient) {
    size_ += computeBoolSize(2, self.transient);
  }
  if (self.hasUnique) {
    size_ += computeBoolSize(3, self.unique);
  }
  if (self.hasCid) {
    size_ += computeStringSize(4, self.cid);
  }
  if (self.hasCdate) {
    size_ += computeStringSize(5, self.cdate);
  }
  if (self.hasCreatedBy) {
    size_ += computeStringSize(6, self.createdBy);
  }
  if (self.hasSort) {
    size_ += computeStringSize(7, self.sort);
  }
  if (self.hasLimit) {
    size_ += computeInt32Size(8, self.limit);
  }
  if (self.hasSkip) {
    size_ += computeInt32Size(9, self.skip);
  }
  if (self.hasFlag) {
    size_ += computeInt32Size(10, self.flag);
  }
  if (self.hasCount) {
    size_ += computeInt32Size(11, self.count);
  }
  if (self.hasUdate) {
    size_ += computeStringSize(12, self.udate);
  }
  if (self.hasT) {
    size_ += computeInt64Size(13, self.t);
  }
  if (self.hasN) {
    size_ += computeStringSize(14, self.n);
  }
  if (self.hasS) {
    size_ += computeStringSize(15, self.s);
  }
  if (self.hasResults) {
    size_ += computeMessageSize(100, self.results);
  }
  if (self.hasWhere) {
    size_ += computeMessageSize(101, self.where);
  }
  if (self.hasAttr) {
    size_ += computeMessageSize(103, self.attr);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConvCommand*) parseFromData:(NSData*) data {
  return (ConvCommand*)[[[ConvCommand builder] mergeFromData:data] build];
}
+ (ConvCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConvCommand*)[[[ConvCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ConvCommand*) parseFromInputStream:(NSInputStream*) input {
  return (ConvCommand*)[[[ConvCommand builder] mergeFromInputStream:input] build];
}
+ (ConvCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConvCommand*)[[[ConvCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConvCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ConvCommand*)[[[ConvCommand builder] mergeFromCodedInputStream:input] build];
}
+ (ConvCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ConvCommand*)[[[ConvCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ConvCommandBuilder*) builder {
  return [[ConvCommandBuilder alloc] init];
}
+ (ConvCommandBuilder*) builderWithPrototype:(ConvCommand*) prototype {
  return [[ConvCommand builder] mergeFrom:prototype];
}
- (ConvCommandBuilder*) builder {
  return [ConvCommand builder];
}
- (ConvCommandBuilder*) toBuilder {
  return [ConvCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  [self.mArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"m", obj];
  }];
  if (self.hasTransient) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transient", [NSNumber numberWithBool:self.transient]];
  }
  if (self.hasUnique) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unique", [NSNumber numberWithBool:self.unique]];
  }
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasCdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cdate", self.cdate];
  }
  if (self.hasCreatedBy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createdBy", self.createdBy];
  }
  if (self.hasSort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sort", self.sort];
  }
  if (self.hasLimit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"limit", [NSNumber numberWithInteger:self.limit]];
  }
  if (self.hasSkip) {
    [output appendFormat:@"%@%@: %@\n", indent, @"skip", [NSNumber numberWithInteger:self.skip]];
  }
  if (self.hasFlag) {
    [output appendFormat:@"%@%@: %@\n", indent, @"flag", [NSNumber numberWithInteger:self.flag]];
  }
  if (self.hasCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"count", [NSNumber numberWithInteger:self.count]];
  }
  if (self.hasUdate) {
    [output appendFormat:@"%@%@: %@\n", indent, @"udate", self.udate];
  }
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  if (self.hasN) {
    [output appendFormat:@"%@%@: %@\n", indent, @"n", self.n];
  }
  if (self.hasS) {
    [output appendFormat:@"%@%@: %@\n", indent, @"s", self.s];
  }
  if (self.hasResults) {
    [output appendFormat:@"%@%@ {\n", indent, @"results"];
    [self.results writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasWhere) {
    [output appendFormat:@"%@%@ {\n", indent, @"where"];
    [self.where writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAttr) {
    [output appendFormat:@"%@%@ {\n", indent, @"attr"];
    [self.attr writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  [dictionary setObject:self.m forKey: @"m"];
  if (self.hasTransient) {
    [dictionary setObject: [NSNumber numberWithBool:self.transient] forKey: @"transient"];
  }
  if (self.hasUnique) {
    [dictionary setObject: [NSNumber numberWithBool:self.unique] forKey: @"unique"];
  }
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasCdate) {
    [dictionary setObject: self.cdate forKey: @"cdate"];
  }
  if (self.hasCreatedBy) {
    [dictionary setObject: self.createdBy forKey: @"createdBy"];
  }
  if (self.hasSort) {
    [dictionary setObject: self.sort forKey: @"sort"];
  }
  if (self.hasLimit) {
    [dictionary setObject: [NSNumber numberWithInteger:self.limit] forKey: @"limit"];
  }
  if (self.hasSkip) {
    [dictionary setObject: [NSNumber numberWithInteger:self.skip] forKey: @"skip"];
  }
  if (self.hasFlag) {
    [dictionary setObject: [NSNumber numberWithInteger:self.flag] forKey: @"flag"];
  }
  if (self.hasCount) {
    [dictionary setObject: [NSNumber numberWithInteger:self.count] forKey: @"count"];
  }
  if (self.hasUdate) {
    [dictionary setObject: self.udate forKey: @"udate"];
  }
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  if (self.hasN) {
    [dictionary setObject: self.n forKey: @"n"];
  }
  if (self.hasS) {
    [dictionary setObject: self.s forKey: @"s"];
  }
  if (self.hasResults) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.results storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"results"];
  }
  if (self.hasWhere) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.where storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"where"];
  }
  if (self.hasAttr) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.attr storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"attr"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ConvCommand class]]) {
    return NO;
  }
  ConvCommand *otherMessage = other;
  return
      [self.mArray isEqualToArray:otherMessage.mArray] &&
      self.hasTransient == otherMessage.hasTransient &&
      (!self.hasTransient || self.transient == otherMessage.transient) &&
      self.hasUnique == otherMessage.hasUnique &&
      (!self.hasUnique || self.unique == otherMessage.unique) &&
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasCdate == otherMessage.hasCdate &&
      (!self.hasCdate || [self.cdate isEqual:otherMessage.cdate]) &&
      self.hasCreatedBy == otherMessage.hasCreatedBy &&
      (!self.hasCreatedBy || [self.createdBy isEqual:otherMessage.createdBy]) &&
      self.hasSort == otherMessage.hasSort &&
      (!self.hasSort || [self.sort isEqual:otherMessage.sort]) &&
      self.hasLimit == otherMessage.hasLimit &&
      (!self.hasLimit || self.limit == otherMessage.limit) &&
      self.hasSkip == otherMessage.hasSkip &&
      (!self.hasSkip || self.skip == otherMessage.skip) &&
      self.hasFlag == otherMessage.hasFlag &&
      (!self.hasFlag || self.flag == otherMessage.flag) &&
      self.hasCount == otherMessage.hasCount &&
      (!self.hasCount || self.count == otherMessage.count) &&
      self.hasUdate == otherMessage.hasUdate &&
      (!self.hasUdate || [self.udate isEqual:otherMessage.udate]) &&
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      self.hasN == otherMessage.hasN &&
      (!self.hasN || [self.n isEqual:otherMessage.n]) &&
      self.hasS == otherMessage.hasS &&
      (!self.hasS || [self.s isEqual:otherMessage.s]) &&
      self.hasResults == otherMessage.hasResults &&
      (!self.hasResults || [self.results isEqual:otherMessage.results]) &&
      self.hasWhere == otherMessage.hasWhere &&
      (!self.hasWhere || [self.where isEqual:otherMessage.where]) &&
      self.hasAttr == otherMessage.hasAttr &&
      (!self.hasAttr || [self.attr isEqual:otherMessage.attr]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  [self.mArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasTransient) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.transient] hash];
  }
  if (self.hasUnique) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.unique] hash];
  }
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasCdate) {
    hashCode = hashCode * 31 + [self.cdate hash];
  }
  if (self.hasCreatedBy) {
    hashCode = hashCode * 31 + [self.createdBy hash];
  }
  if (self.hasSort) {
    hashCode = hashCode * 31 + [self.sort hash];
  }
  if (self.hasLimit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.limit] hash];
  }
  if (self.hasSkip) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.skip] hash];
  }
  if (self.hasFlag) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.flag] hash];
  }
  if (self.hasCount) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.count] hash];
  }
  if (self.hasUdate) {
    hashCode = hashCode * 31 + [self.udate hash];
  }
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  if (self.hasN) {
    hashCode = hashCode * 31 + [self.n hash];
  }
  if (self.hasS) {
    hashCode = hashCode * 31 + [self.s hash];
  }
  if (self.hasResults) {
    hashCode = hashCode * 31 + [self.results hash];
  }
  if (self.hasWhere) {
    hashCode = hashCode * 31 + [self.where hash];
  }
  if (self.hasAttr) {
    hashCode = hashCode * 31 + [self.attr hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ConvCommandBuilder()
@property (strong) ConvCommand* resultConvCommand;
@end

@implementation ConvCommandBuilder
@synthesize resultConvCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultConvCommand = [[ConvCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultConvCommand;
}
- (ConvCommandBuilder*) clear {
  self.resultConvCommand = [[ConvCommand alloc] init];
  return self;
}
- (ConvCommandBuilder*) clone {
  return [ConvCommand builderWithPrototype:resultConvCommand];
}
- (ConvCommand*) defaultInstance {
  return [ConvCommand defaultInstance];
}
- (ConvCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ConvCommand*) buildPartial {
  ConvCommand* returnMe = resultConvCommand;
  self.resultConvCommand = nil;
  return returnMe;
}
- (ConvCommandBuilder*) mergeFrom:(ConvCommand*) other {
  if (other == [ConvCommand defaultInstance]) {
    return self;
  }
  if (other.mArray.count > 0) {
    if (resultConvCommand.mArray == nil) {
      resultConvCommand.mArray = [[NSMutableArray alloc] initWithArray:other.mArray];
    } else {
      [resultConvCommand.mArray addObjectsFromArray:other.mArray];
    }
  }
  if (other.hasTransient) {
    [self setTransient:other.transient];
  }
  if (other.hasUnique) {
    [self setUnique:other.unique];
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasCdate) {
    [self setCdate:other.cdate];
  }
  if (other.hasCreatedBy) {
    [self setCreatedBy:other.createdBy];
  }
  if (other.hasSort) {
    [self setSort:other.sort];
  }
  if (other.hasLimit) {
    [self setLimit:other.limit];
  }
  if (other.hasSkip) {
    [self setSkip:other.skip];
  }
  if (other.hasFlag) {
    [self setFlag:other.flag];
  }
  if (other.hasCount) {
    [self setCount:other.count];
  }
  if (other.hasUdate) {
    [self setUdate:other.udate];
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.hasN) {
    [self setN:other.n];
  }
  if (other.hasS) {
    [self setS:other.s];
  }
  if (other.hasResults) {
    [self mergeResults:other.results];
  }
  if (other.hasWhere) {
    [self mergeWhere:other.where];
  }
  if (other.hasAttr) {
    [self mergeAttr:other.attr];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ConvCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ConvCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self addM:[input readString]];
        break;
      }
      case 16: {
        [self setTransient:[input readBool]];
        break;
      }
      case 24: {
        [self setUnique:[input readBool]];
        break;
      }
      case 34: {
        [self setCid:[input readString]];
        break;
      }
      case 42: {
        [self setCdate:[input readString]];
        break;
      }
      case 50: {
        [self setCreatedBy:[input readString]];
        break;
      }
      case 58: {
        [self setSort:[input readString]];
        break;
      }
      case 64: {
        [self setLimit:[input readInt32]];
        break;
      }
      case 72: {
        [self setSkip:[input readInt32]];
        break;
      }
      case 80: {
        [self setFlag:[input readInt32]];
        break;
      }
      case 88: {
        [self setCount:[input readInt32]];
        break;
      }
      case 98: {
        [self setUdate:[input readString]];
        break;
      }
      case 104: {
        [self setT:[input readInt64]];
        break;
      }
      case 114: {
        [self setN:[input readString]];
        break;
      }
      case 122: {
        [self setS:[input readString]];
        break;
      }
      case 802: {
        JsonObjectMessageBuilder* subBuilder = [JsonObjectMessage builder];
        if (self.hasResults) {
          [subBuilder mergeFrom:self.results];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setResults:[subBuilder buildPartial]];
        break;
      }
      case 810: {
        JsonObjectMessageBuilder* subBuilder = [JsonObjectMessage builder];
        if (self.hasWhere) {
          [subBuilder mergeFrom:self.where];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setWhere:[subBuilder buildPartial]];
        break;
      }
      case 826: {
        JsonObjectMessageBuilder* subBuilder = [JsonObjectMessage builder];
        if (self.hasAttr) {
          [subBuilder mergeFrom:self.attr];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAttr:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSMutableArray *)m {
  return resultConvCommand.mArray;
}
- (NSString*)mAtIndex:(NSUInteger)index {
  return [resultConvCommand mAtIndex:index];
}
- (ConvCommandBuilder *)addM:(NSString*)value {
  if (resultConvCommand.mArray == nil) {
    resultConvCommand.mArray = [[NSMutableArray alloc]init];
  }
  [resultConvCommand.mArray addObject:value];
  return self;
}
- (ConvCommandBuilder *)setMArray:(NSArray *)array {
  resultConvCommand.mArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (ConvCommandBuilder *)clearM {
  resultConvCommand.mArray = nil;
  return self;
}
- (BOOL) hasTransient {
  return resultConvCommand.hasTransient;
}
- (BOOL) transient {
  return resultConvCommand.transient;
}
- (ConvCommandBuilder*) setTransient:(BOOL) value {
  resultConvCommand.hasTransient = YES;
  resultConvCommand.transient = value;
  return self;
}
- (ConvCommandBuilder*) clearTransient {
  resultConvCommand.hasTransient = NO;
  resultConvCommand.transient = NO;
  return self;
}
- (BOOL) hasUnique {
  return resultConvCommand.hasUnique;
}
- (BOOL) unique {
  return resultConvCommand.unique;
}
- (ConvCommandBuilder*) setUnique:(BOOL) value {
  resultConvCommand.hasUnique = YES;
  resultConvCommand.unique = value;
  return self;
}
- (ConvCommandBuilder*) clearUnique {
  resultConvCommand.hasUnique = NO;
  resultConvCommand.unique = NO;
  return self;
}
- (BOOL) hasCid {
  return resultConvCommand.hasCid;
}
- (NSString*) cid {
  return resultConvCommand.cid;
}
- (ConvCommandBuilder*) setCid:(NSString*) value {
  resultConvCommand.hasCid = YES;
  resultConvCommand.cid = value;
  return self;
}
- (ConvCommandBuilder*) clearCid {
  resultConvCommand.hasCid = NO;
  resultConvCommand.cid = @"";
  return self;
}
- (BOOL) hasCdate {
  return resultConvCommand.hasCdate;
}
- (NSString*) cdate {
  return resultConvCommand.cdate;
}
- (ConvCommandBuilder*) setCdate:(NSString*) value {
  resultConvCommand.hasCdate = YES;
  resultConvCommand.cdate = value;
  return self;
}
- (ConvCommandBuilder*) clearCdate {
  resultConvCommand.hasCdate = NO;
  resultConvCommand.cdate = @"";
  return self;
}
- (BOOL) hasCreatedBy {
  return resultConvCommand.hasCreatedBy;
}
- (NSString*) createdBy {
  return resultConvCommand.createdBy;
}
- (ConvCommandBuilder*) setCreatedBy:(NSString*) value {
  resultConvCommand.hasCreatedBy = YES;
  resultConvCommand.createdBy = value;
  return self;
}
- (ConvCommandBuilder*) clearCreatedBy {
  resultConvCommand.hasCreatedBy = NO;
  resultConvCommand.createdBy = @"";
  return self;
}
- (BOOL) hasSort {
  return resultConvCommand.hasSort;
}
- (NSString*) sort {
  return resultConvCommand.sort;
}
- (ConvCommandBuilder*) setSort:(NSString*) value {
  resultConvCommand.hasSort = YES;
  resultConvCommand.sort = value;
  return self;
}
- (ConvCommandBuilder*) clearSort {
  resultConvCommand.hasSort = NO;
  resultConvCommand.sort = @"";
  return self;
}
- (BOOL) hasLimit {
  return resultConvCommand.hasLimit;
}
- (SInt32) limit {
  return resultConvCommand.limit;
}
- (ConvCommandBuilder*) setLimit:(SInt32) value {
  resultConvCommand.hasLimit = YES;
  resultConvCommand.limit = value;
  return self;
}
- (ConvCommandBuilder*) clearLimit {
  resultConvCommand.hasLimit = NO;
  resultConvCommand.limit = 0;
  return self;
}
- (BOOL) hasSkip {
  return resultConvCommand.hasSkip;
}
- (SInt32) skip {
  return resultConvCommand.skip;
}
- (ConvCommandBuilder*) setSkip:(SInt32) value {
  resultConvCommand.hasSkip = YES;
  resultConvCommand.skip = value;
  return self;
}
- (ConvCommandBuilder*) clearSkip {
  resultConvCommand.hasSkip = NO;
  resultConvCommand.skip = 0;
  return self;
}
- (BOOL) hasFlag {
  return resultConvCommand.hasFlag;
}
- (SInt32) flag {
  return resultConvCommand.flag;
}
- (ConvCommandBuilder*) setFlag:(SInt32) value {
  resultConvCommand.hasFlag = YES;
  resultConvCommand.flag = value;
  return self;
}
- (ConvCommandBuilder*) clearFlag {
  resultConvCommand.hasFlag = NO;
  resultConvCommand.flag = 0;
  return self;
}
- (BOOL) hasCount {
  return resultConvCommand.hasCount;
}
- (SInt32) count {
  return resultConvCommand.count;
}
- (ConvCommandBuilder*) setCount:(SInt32) value {
  resultConvCommand.hasCount = YES;
  resultConvCommand.count = value;
  return self;
}
- (ConvCommandBuilder*) clearCount {
  resultConvCommand.hasCount = NO;
  resultConvCommand.count = 0;
  return self;
}
- (BOOL) hasUdate {
  return resultConvCommand.hasUdate;
}
- (NSString*) udate {
  return resultConvCommand.udate;
}
- (ConvCommandBuilder*) setUdate:(NSString*) value {
  resultConvCommand.hasUdate = YES;
  resultConvCommand.udate = value;
  return self;
}
- (ConvCommandBuilder*) clearUdate {
  resultConvCommand.hasUdate = NO;
  resultConvCommand.udate = @"";
  return self;
}
- (BOOL) hasT {
  return resultConvCommand.hasT;
}
- (SInt64) t {
  return resultConvCommand.t;
}
- (ConvCommandBuilder*) setT:(SInt64) value {
  resultConvCommand.hasT = YES;
  resultConvCommand.t = value;
  return self;
}
- (ConvCommandBuilder*) clearT {
  resultConvCommand.hasT = NO;
  resultConvCommand.t = 0L;
  return self;
}
- (BOOL) hasN {
  return resultConvCommand.hasN;
}
- (NSString*) n {
  return resultConvCommand.n;
}
- (ConvCommandBuilder*) setN:(NSString*) value {
  resultConvCommand.hasN = YES;
  resultConvCommand.n = value;
  return self;
}
- (ConvCommandBuilder*) clearN {
  resultConvCommand.hasN = NO;
  resultConvCommand.n = @"";
  return self;
}
- (BOOL) hasS {
  return resultConvCommand.hasS;
}
- (NSString*) s {
  return resultConvCommand.s;
}
- (ConvCommandBuilder*) setS:(NSString*) value {
  resultConvCommand.hasS = YES;
  resultConvCommand.s = value;
  return self;
}
- (ConvCommandBuilder*) clearS {
  resultConvCommand.hasS = NO;
  resultConvCommand.s = @"";
  return self;
}
- (BOOL) hasResults {
  return resultConvCommand.hasResults;
}
- (JsonObjectMessage*) results {
  return resultConvCommand.results;
}
- (ConvCommandBuilder*) setResults:(JsonObjectMessage*) value {
  resultConvCommand.hasResults = YES;
  resultConvCommand.results = value;
  return self;
}
- (ConvCommandBuilder*) setResultsBuilder:(JsonObjectMessageBuilder*) builderForValue {
  return [self setResults:[builderForValue build]];
}
- (ConvCommandBuilder*) mergeResults:(JsonObjectMessage*) value {
  if (resultConvCommand.hasResults &&
      resultConvCommand.results != [JsonObjectMessage defaultInstance]) {
    resultConvCommand.results =
      [[[JsonObjectMessage builderWithPrototype:resultConvCommand.results] mergeFrom:value] buildPartial];
  } else {
    resultConvCommand.results = value;
  }
  resultConvCommand.hasResults = YES;
  return self;
}
- (ConvCommandBuilder*) clearResults {
  resultConvCommand.hasResults = NO;
  resultConvCommand.results = [JsonObjectMessage defaultInstance];
  return self;
}
- (BOOL) hasWhere {
  return resultConvCommand.hasWhere;
}
- (JsonObjectMessage*) where {
  return resultConvCommand.where;
}
- (ConvCommandBuilder*) setWhere:(JsonObjectMessage*) value {
  resultConvCommand.hasWhere = YES;
  resultConvCommand.where = value;
  return self;
}
- (ConvCommandBuilder*) setWhereBuilder:(JsonObjectMessageBuilder*) builderForValue {
  return [self setWhere:[builderForValue build]];
}
- (ConvCommandBuilder*) mergeWhere:(JsonObjectMessage*) value {
  if (resultConvCommand.hasWhere &&
      resultConvCommand.where != [JsonObjectMessage defaultInstance]) {
    resultConvCommand.where =
      [[[JsonObjectMessage builderWithPrototype:resultConvCommand.where] mergeFrom:value] buildPartial];
  } else {
    resultConvCommand.where = value;
  }
  resultConvCommand.hasWhere = YES;
  return self;
}
- (ConvCommandBuilder*) clearWhere {
  resultConvCommand.hasWhere = NO;
  resultConvCommand.where = [JsonObjectMessage defaultInstance];
  return self;
}
- (BOOL) hasAttr {
  return resultConvCommand.hasAttr;
}
- (JsonObjectMessage*) attr {
  return resultConvCommand.attr;
}
- (ConvCommandBuilder*) setAttr:(JsonObjectMessage*) value {
  resultConvCommand.hasAttr = YES;
  resultConvCommand.attr = value;
  return self;
}
- (ConvCommandBuilder*) setAttrBuilder:(JsonObjectMessageBuilder*) builderForValue {
  return [self setAttr:[builderForValue build]];
}
- (ConvCommandBuilder*) mergeAttr:(JsonObjectMessage*) value {
  if (resultConvCommand.hasAttr &&
      resultConvCommand.attr != [JsonObjectMessage defaultInstance]) {
    resultConvCommand.attr =
      [[[JsonObjectMessage builderWithPrototype:resultConvCommand.attr] mergeFrom:value] buildPartial];
  } else {
    resultConvCommand.attr = value;
  }
  resultConvCommand.hasAttr = YES;
  return self;
}
- (ConvCommandBuilder*) clearAttr {
  resultConvCommand.hasAttr = NO;
  resultConvCommand.attr = [JsonObjectMessage defaultInstance];
  return self;
}
@end

@interface RoomCommand ()
@property (strong) NSString* roomId;
@property (strong) NSString* s;
@property SInt64 t;
@property (strong) NSString* n;
@property BOOL transient;
@property (strong) NSMutableArray * roomPeerIdsArray;
@end

@implementation RoomCommand

- (BOOL) hasRoomId {
  return !!hasRoomId_;
}
- (void) setHasRoomId:(BOOL) _value_ {
  hasRoomId_ = !!_value_;
}
@synthesize roomId;
- (BOOL) hasS {
  return !!hasS_;
}
- (void) setHasS:(BOOL) _value_ {
  hasS_ = !!_value_;
}
@synthesize s;
- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (BOOL) hasN {
  return !!hasN_;
}
- (void) setHasN:(BOOL) _value_ {
  hasN_ = !!_value_;
}
@synthesize n;
- (BOOL) hasTransient {
  return !!hasTransient_;
}
- (void) setHasTransient:(BOOL) _value_ {
  hasTransient_ = !!_value_;
}
- (BOOL) transient {
  return !!transient_;
}
- (void) setTransient:(BOOL) _value_ {
  transient_ = !!_value_;
}
@synthesize roomPeerIdsArray;
@dynamic roomPeerIds;
- (instancetype) init {
  if ((self = [super init])) {
    self.roomId = @"";
    self.s = @"";
    self.t = 0L;
    self.n = @"";
    self.transient = NO;
  }
  return self;
}
static RoomCommand* defaultRoomCommandInstance = nil;
+ (void) initialize {
  if (self == [RoomCommand class]) {
    defaultRoomCommandInstance = [[RoomCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRoomCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultRoomCommandInstance;
}
- (NSArray *)roomPeerIds {
  return roomPeerIdsArray;
}
- (NSString*)roomPeerIdsAtIndex:(NSUInteger)index {
  return [roomPeerIdsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRoomId) {
    [output writeString:1 value:self.roomId];
  }
  if (self.hasS) {
    [output writeString:2 value:self.s];
  }
  if (self.hasT) {
    [output writeInt64:3 value:self.t];
  }
  if (self.hasN) {
    [output writeString:4 value:self.n];
  }
  if (self.hasTransient) {
    [output writeBool:5 value:self.transient];
  }
  [self.roomPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:6 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasRoomId) {
    size_ += computeStringSize(1, self.roomId);
  }
  if (self.hasS) {
    size_ += computeStringSize(2, self.s);
  }
  if (self.hasT) {
    size_ += computeInt64Size(3, self.t);
  }
  if (self.hasN) {
    size_ += computeStringSize(4, self.n);
  }
  if (self.hasTransient) {
    size_ += computeBoolSize(5, self.transient);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.roomPeerIdsArray.count;
    [self.roomPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RoomCommand*) parseFromData:(NSData*) data {
  return (RoomCommand*)[[[RoomCommand builder] mergeFromData:data] build];
}
+ (RoomCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomCommand*)[[[RoomCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RoomCommand*) parseFromInputStream:(NSInputStream*) input {
  return (RoomCommand*)[[[RoomCommand builder] mergeFromInputStream:input] build];
}
+ (RoomCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomCommand*)[[[RoomCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RoomCommand*)[[[RoomCommand builder] mergeFromCodedInputStream:input] build];
}
+ (RoomCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RoomCommand*)[[[RoomCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RoomCommandBuilder*) builder {
  return [[RoomCommandBuilder alloc] init];
}
+ (RoomCommandBuilder*) builderWithPrototype:(RoomCommand*) prototype {
  return [[RoomCommand builder] mergeFrom:prototype];
}
- (RoomCommandBuilder*) builder {
  return [RoomCommand builder];
}
- (RoomCommandBuilder*) toBuilder {
  return [RoomCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRoomId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomId", self.roomId];
  }
  if (self.hasS) {
    [output appendFormat:@"%@%@: %@\n", indent, @"s", self.s];
  }
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  if (self.hasN) {
    [output appendFormat:@"%@%@: %@\n", indent, @"n", self.n];
  }
  if (self.hasTransient) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transient", [NSNumber numberWithBool:self.transient]];
  }
  [self.roomPeerIdsArray enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"roomPeerIds", obj];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasRoomId) {
    [dictionary setObject: self.roomId forKey: @"roomId"];
  }
  if (self.hasS) {
    [dictionary setObject: self.s forKey: @"s"];
  }
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  if (self.hasN) {
    [dictionary setObject: self.n forKey: @"n"];
  }
  if (self.hasTransient) {
    [dictionary setObject: [NSNumber numberWithBool:self.transient] forKey: @"transient"];
  }
  [dictionary setObject:self.roomPeerIds forKey: @"roomPeerIds"];
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RoomCommand class]]) {
    return NO;
  }
  RoomCommand *otherMessage = other;
  return
      self.hasRoomId == otherMessage.hasRoomId &&
      (!self.hasRoomId || [self.roomId isEqual:otherMessage.roomId]) &&
      self.hasS == otherMessage.hasS &&
      (!self.hasS || [self.s isEqual:otherMessage.s]) &&
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      self.hasN == otherMessage.hasN &&
      (!self.hasN || [self.n isEqual:otherMessage.n]) &&
      self.hasTransient == otherMessage.hasTransient &&
      (!self.hasTransient || self.transient == otherMessage.transient) &&
      [self.roomPeerIdsArray isEqualToArray:otherMessage.roomPeerIdsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasRoomId) {
    hashCode = hashCode * 31 + [self.roomId hash];
  }
  if (self.hasS) {
    hashCode = hashCode * 31 + [self.s hash];
  }
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  if (self.hasN) {
    hashCode = hashCode * 31 + [self.n hash];
  }
  if (self.hasTransient) {
    hashCode = hashCode * 31 + [[NSNumber numberWithBool:self.transient] hash];
  }
  [self.roomPeerIdsArray enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RoomCommandBuilder()
@property (strong) RoomCommand* resultRoomCommand;
@end

@implementation RoomCommandBuilder
@synthesize resultRoomCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRoomCommand = [[RoomCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRoomCommand;
}
- (RoomCommandBuilder*) clear {
  self.resultRoomCommand = [[RoomCommand alloc] init];
  return self;
}
- (RoomCommandBuilder*) clone {
  return [RoomCommand builderWithPrototype:resultRoomCommand];
}
- (RoomCommand*) defaultInstance {
  return [RoomCommand defaultInstance];
}
- (RoomCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RoomCommand*) buildPartial {
  RoomCommand* returnMe = resultRoomCommand;
  self.resultRoomCommand = nil;
  return returnMe;
}
- (RoomCommandBuilder*) mergeFrom:(RoomCommand*) other {
  if (other == [RoomCommand defaultInstance]) {
    return self;
  }
  if (other.hasRoomId) {
    [self setRoomId:other.roomId];
  }
  if (other.hasS) {
    [self setS:other.s];
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.hasN) {
    [self setN:other.n];
  }
  if (other.hasTransient) {
    [self setTransient:other.transient];
  }
  if (other.roomPeerIdsArray.count > 0) {
    if (resultRoomCommand.roomPeerIdsArray == nil) {
      resultRoomCommand.roomPeerIdsArray = [[NSMutableArray alloc] initWithArray:other.roomPeerIdsArray];
    } else {
      [resultRoomCommand.roomPeerIdsArray addObjectsFromArray:other.roomPeerIdsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RoomCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RoomCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setRoomId:[input readString]];
        break;
      }
      case 18: {
        [self setS:[input readString]];
        break;
      }
      case 24: {
        [self setT:[input readInt64]];
        break;
      }
      case 34: {
        [self setN:[input readString]];
        break;
      }
      case 40: {
        [self setTransient:[input readBool]];
        break;
      }
      case 50: {
        [self addRoomPeerIds:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasRoomId {
  return resultRoomCommand.hasRoomId;
}
- (NSString*) roomId {
  return resultRoomCommand.roomId;
}
- (RoomCommandBuilder*) setRoomId:(NSString*) value {
  resultRoomCommand.hasRoomId = YES;
  resultRoomCommand.roomId = value;
  return self;
}
- (RoomCommandBuilder*) clearRoomId {
  resultRoomCommand.hasRoomId = NO;
  resultRoomCommand.roomId = @"";
  return self;
}
- (BOOL) hasS {
  return resultRoomCommand.hasS;
}
- (NSString*) s {
  return resultRoomCommand.s;
}
- (RoomCommandBuilder*) setS:(NSString*) value {
  resultRoomCommand.hasS = YES;
  resultRoomCommand.s = value;
  return self;
}
- (RoomCommandBuilder*) clearS {
  resultRoomCommand.hasS = NO;
  resultRoomCommand.s = @"";
  return self;
}
- (BOOL) hasT {
  return resultRoomCommand.hasT;
}
- (SInt64) t {
  return resultRoomCommand.t;
}
- (RoomCommandBuilder*) setT:(SInt64) value {
  resultRoomCommand.hasT = YES;
  resultRoomCommand.t = value;
  return self;
}
- (RoomCommandBuilder*) clearT {
  resultRoomCommand.hasT = NO;
  resultRoomCommand.t = 0L;
  return self;
}
- (BOOL) hasN {
  return resultRoomCommand.hasN;
}
- (NSString*) n {
  return resultRoomCommand.n;
}
- (RoomCommandBuilder*) setN:(NSString*) value {
  resultRoomCommand.hasN = YES;
  resultRoomCommand.n = value;
  return self;
}
- (RoomCommandBuilder*) clearN {
  resultRoomCommand.hasN = NO;
  resultRoomCommand.n = @"";
  return self;
}
- (BOOL) hasTransient {
  return resultRoomCommand.hasTransient;
}
- (BOOL) transient {
  return resultRoomCommand.transient;
}
- (RoomCommandBuilder*) setTransient:(BOOL) value {
  resultRoomCommand.hasTransient = YES;
  resultRoomCommand.transient = value;
  return self;
}
- (RoomCommandBuilder*) clearTransient {
  resultRoomCommand.hasTransient = NO;
  resultRoomCommand.transient = NO;
  return self;
}
- (NSMutableArray *)roomPeerIds {
  return resultRoomCommand.roomPeerIdsArray;
}
- (NSString*)roomPeerIdsAtIndex:(NSUInteger)index {
  return [resultRoomCommand roomPeerIdsAtIndex:index];
}
- (RoomCommandBuilder *)addRoomPeerIds:(NSString*)value {
  if (resultRoomCommand.roomPeerIdsArray == nil) {
    resultRoomCommand.roomPeerIdsArray = [[NSMutableArray alloc]init];
  }
  [resultRoomCommand.roomPeerIdsArray addObject:value];
  return self;
}
- (RoomCommandBuilder *)setRoomPeerIdsArray:(NSArray *)array {
  resultRoomCommand.roomPeerIdsArray = [[NSMutableArray alloc] initWithArray:array];
  return self;
}
- (RoomCommandBuilder *)clearRoomPeerIds {
  resultRoomCommand.roomPeerIdsArray = nil;
  return self;
}
@end

@interface LogsCommand ()
@property (strong) NSString* cid;
@property SInt32 l;
@property SInt32 limit;
@property SInt64 t;
@property SInt64 tt;
@property (strong) NSString* tmid;
@property (strong) NSString* mid;
@property (strong) NSMutableArray * logsArray;
@end

@implementation LogsCommand

- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasL {
  return !!hasL_;
}
- (void) setHasL:(BOOL) _value_ {
  hasL_ = !!_value_;
}
@synthesize l;
- (BOOL) hasLimit {
  return !!hasLimit_;
}
- (void) setHasLimit:(BOOL) _value_ {
  hasLimit_ = !!_value_;
}
@synthesize limit;
- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (BOOL) hasTt {
  return !!hasTt_;
}
- (void) setHasTt:(BOOL) _value_ {
  hasTt_ = !!_value_;
}
@synthesize tt;
- (BOOL) hasTmid {
  return !!hasTmid_;
}
- (void) setHasTmid:(BOOL) _value_ {
  hasTmid_ = !!_value_;
}
@synthesize tmid;
- (BOOL) hasMid {
  return !!hasMid_;
}
- (void) setHasMid:(BOOL) _value_ {
  hasMid_ = !!_value_;
}
@synthesize mid;
@synthesize logsArray;
@dynamic logs;
- (instancetype) init {
  if ((self = [super init])) {
    self.cid = @"";
    self.l = 0;
    self.limit = 0;
    self.t = 0L;
    self.tt = 0L;
    self.tmid = @"";
    self.mid = @"";
  }
  return self;
}
static LogsCommand* defaultLogsCommandInstance = nil;
+ (void) initialize {
  if (self == [LogsCommand class]) {
    defaultLogsCommandInstance = [[LogsCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLogsCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultLogsCommandInstance;
}
- (NSArray *)logs {
  return logsArray;
}
- (LogItem*)logsAtIndex:(NSUInteger)index {
  return [logsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCid) {
    [output writeString:1 value:self.cid];
  }
  if (self.hasL) {
    [output writeInt32:2 value:self.l];
  }
  if (self.hasLimit) {
    [output writeInt32:3 value:self.limit];
  }
  if (self.hasT) {
    [output writeInt64:4 value:self.t];
  }
  if (self.hasTt) {
    [output writeInt64:5 value:self.tt];
  }
  if (self.hasTmid) {
    [output writeString:6 value:self.tmid];
  }
  if (self.hasMid) {
    [output writeString:7 value:self.mid];
  }
  [self.logsArray enumerateObjectsUsingBlock:^(LogItem *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:105 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCid) {
    size_ += computeStringSize(1, self.cid);
  }
  if (self.hasL) {
    size_ += computeInt32Size(2, self.l);
  }
  if (self.hasLimit) {
    size_ += computeInt32Size(3, self.limit);
  }
  if (self.hasT) {
    size_ += computeInt64Size(4, self.t);
  }
  if (self.hasTt) {
    size_ += computeInt64Size(5, self.tt);
  }
  if (self.hasTmid) {
    size_ += computeStringSize(6, self.tmid);
  }
  if (self.hasMid) {
    size_ += computeStringSize(7, self.mid);
  }
  [self.logsArray enumerateObjectsUsingBlock:^(LogItem *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(105, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LogsCommand*) parseFromData:(NSData*) data {
  return (LogsCommand*)[[[LogsCommand builder] mergeFromData:data] build];
}
+ (LogsCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LogsCommand*)[[[LogsCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LogsCommand*) parseFromInputStream:(NSInputStream*) input {
  return (LogsCommand*)[[[LogsCommand builder] mergeFromInputStream:input] build];
}
+ (LogsCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LogsCommand*)[[[LogsCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LogsCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LogsCommand*)[[[LogsCommand builder] mergeFromCodedInputStream:input] build];
}
+ (LogsCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LogsCommand*)[[[LogsCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LogsCommandBuilder*) builder {
  return [[LogsCommandBuilder alloc] init];
}
+ (LogsCommandBuilder*) builderWithPrototype:(LogsCommand*) prototype {
  return [[LogsCommand builder] mergeFrom:prototype];
}
- (LogsCommandBuilder*) builder {
  return [LogsCommand builder];
}
- (LogsCommandBuilder*) toBuilder {
  return [LogsCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasL) {
    [output appendFormat:@"%@%@: %@\n", indent, @"l", [NSNumber numberWithInteger:self.l]];
  }
  if (self.hasLimit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"limit", [NSNumber numberWithInteger:self.limit]];
  }
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  if (self.hasTt) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tt", [NSNumber numberWithLongLong:self.tt]];
  }
  if (self.hasTmid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"tmid", self.tmid];
  }
  if (self.hasMid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mid", self.mid];
  }
  [self.logsArray enumerateObjectsUsingBlock:^(LogItem *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"logs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasL) {
    [dictionary setObject: [NSNumber numberWithInteger:self.l] forKey: @"l"];
  }
  if (self.hasLimit) {
    [dictionary setObject: [NSNumber numberWithInteger:self.limit] forKey: @"limit"];
  }
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  if (self.hasTt) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.tt] forKey: @"tt"];
  }
  if (self.hasTmid) {
    [dictionary setObject: self.tmid forKey: @"tmid"];
  }
  if (self.hasMid) {
    [dictionary setObject: self.mid forKey: @"mid"];
  }
  for (LogItem* element in self.logsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"logs"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LogsCommand class]]) {
    return NO;
  }
  LogsCommand *otherMessage = other;
  return
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasL == otherMessage.hasL &&
      (!self.hasL || self.l == otherMessage.l) &&
      self.hasLimit == otherMessage.hasLimit &&
      (!self.hasLimit || self.limit == otherMessage.limit) &&
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      self.hasTt == otherMessage.hasTt &&
      (!self.hasTt || self.tt == otherMessage.tt) &&
      self.hasTmid == otherMessage.hasTmid &&
      (!self.hasTmid || [self.tmid isEqual:otherMessage.tmid]) &&
      self.hasMid == otherMessage.hasMid &&
      (!self.hasMid || [self.mid isEqual:otherMessage.mid]) &&
      [self.logsArray isEqualToArray:otherMessage.logsArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasL) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.l] hash];
  }
  if (self.hasLimit) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.limit] hash];
  }
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  if (self.hasTt) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.tt] hash];
  }
  if (self.hasTmid) {
    hashCode = hashCode * 31 + [self.tmid hash];
  }
  if (self.hasMid) {
    hashCode = hashCode * 31 + [self.mid hash];
  }
  [self.logsArray enumerateObjectsUsingBlock:^(LogItem *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LogsCommandBuilder()
@property (strong) LogsCommand* resultLogsCommand;
@end

@implementation LogsCommandBuilder
@synthesize resultLogsCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLogsCommand = [[LogsCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLogsCommand;
}
- (LogsCommandBuilder*) clear {
  self.resultLogsCommand = [[LogsCommand alloc] init];
  return self;
}
- (LogsCommandBuilder*) clone {
  return [LogsCommand builderWithPrototype:resultLogsCommand];
}
- (LogsCommand*) defaultInstance {
  return [LogsCommand defaultInstance];
}
- (LogsCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LogsCommand*) buildPartial {
  LogsCommand* returnMe = resultLogsCommand;
  self.resultLogsCommand = nil;
  return returnMe;
}
- (LogsCommandBuilder*) mergeFrom:(LogsCommand*) other {
  if (other == [LogsCommand defaultInstance]) {
    return self;
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasL) {
    [self setL:other.l];
  }
  if (other.hasLimit) {
    [self setLimit:other.limit];
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  if (other.hasTt) {
    [self setTt:other.tt];
  }
  if (other.hasTmid) {
    [self setTmid:other.tmid];
  }
  if (other.hasMid) {
    [self setMid:other.mid];
  }
  if (other.logsArray.count > 0) {
    if (resultLogsCommand.logsArray == nil) {
      resultLogsCommand.logsArray = [[NSMutableArray alloc] initWithArray:other.logsArray];
    } else {
      [resultLogsCommand.logsArray addObjectsFromArray:other.logsArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LogsCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LogsCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCid:[input readString]];
        break;
      }
      case 16: {
        [self setL:[input readInt32]];
        break;
      }
      case 24: {
        [self setLimit:[input readInt32]];
        break;
      }
      case 32: {
        [self setT:[input readInt64]];
        break;
      }
      case 40: {
        [self setTt:[input readInt64]];
        break;
      }
      case 50: {
        [self setTmid:[input readString]];
        break;
      }
      case 58: {
        [self setMid:[input readString]];
        break;
      }
      case 842: {
        LogItemBuilder* subBuilder = [LogItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addLogs:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCid {
  return resultLogsCommand.hasCid;
}
- (NSString*) cid {
  return resultLogsCommand.cid;
}
- (LogsCommandBuilder*) setCid:(NSString*) value {
  resultLogsCommand.hasCid = YES;
  resultLogsCommand.cid = value;
  return self;
}
- (LogsCommandBuilder*) clearCid {
  resultLogsCommand.hasCid = NO;
  resultLogsCommand.cid = @"";
  return self;
}
- (BOOL) hasL {
  return resultLogsCommand.hasL;
}
- (SInt32) l {
  return resultLogsCommand.l;
}
- (LogsCommandBuilder*) setL:(SInt32) value {
  resultLogsCommand.hasL = YES;
  resultLogsCommand.l = value;
  return self;
}
- (LogsCommandBuilder*) clearL {
  resultLogsCommand.hasL = NO;
  resultLogsCommand.l = 0;
  return self;
}
- (BOOL) hasLimit {
  return resultLogsCommand.hasLimit;
}
- (SInt32) limit {
  return resultLogsCommand.limit;
}
- (LogsCommandBuilder*) setLimit:(SInt32) value {
  resultLogsCommand.hasLimit = YES;
  resultLogsCommand.limit = value;
  return self;
}
- (LogsCommandBuilder*) clearLimit {
  resultLogsCommand.hasLimit = NO;
  resultLogsCommand.limit = 0;
  return self;
}
- (BOOL) hasT {
  return resultLogsCommand.hasT;
}
- (SInt64) t {
  return resultLogsCommand.t;
}
- (LogsCommandBuilder*) setT:(SInt64) value {
  resultLogsCommand.hasT = YES;
  resultLogsCommand.t = value;
  return self;
}
- (LogsCommandBuilder*) clearT {
  resultLogsCommand.hasT = NO;
  resultLogsCommand.t = 0L;
  return self;
}
- (BOOL) hasTt {
  return resultLogsCommand.hasTt;
}
- (SInt64) tt {
  return resultLogsCommand.tt;
}
- (LogsCommandBuilder*) setTt:(SInt64) value {
  resultLogsCommand.hasTt = YES;
  resultLogsCommand.tt = value;
  return self;
}
- (LogsCommandBuilder*) clearTt {
  resultLogsCommand.hasTt = NO;
  resultLogsCommand.tt = 0L;
  return self;
}
- (BOOL) hasTmid {
  return resultLogsCommand.hasTmid;
}
- (NSString*) tmid {
  return resultLogsCommand.tmid;
}
- (LogsCommandBuilder*) setTmid:(NSString*) value {
  resultLogsCommand.hasTmid = YES;
  resultLogsCommand.tmid = value;
  return self;
}
- (LogsCommandBuilder*) clearTmid {
  resultLogsCommand.hasTmid = NO;
  resultLogsCommand.tmid = @"";
  return self;
}
- (BOOL) hasMid {
  return resultLogsCommand.hasMid;
}
- (NSString*) mid {
  return resultLogsCommand.mid;
}
- (LogsCommandBuilder*) setMid:(NSString*) value {
  resultLogsCommand.hasMid = YES;
  resultLogsCommand.mid = value;
  return self;
}
- (LogsCommandBuilder*) clearMid {
  resultLogsCommand.hasMid = NO;
  resultLogsCommand.mid = @"";
  return self;
}
- (NSMutableArray *)logs {
  return resultLogsCommand.logsArray;
}
- (LogItem*)logsAtIndex:(NSUInteger)index {
  return [resultLogsCommand logsAtIndex:index];
}
- (LogsCommandBuilder *)addLogs:(LogItem*)value {
  if (resultLogsCommand.logsArray == nil) {
    resultLogsCommand.logsArray = [[NSMutableArray alloc]init];
  }
  [resultLogsCommand.logsArray addObject:value];
  return self;
}
- (LogsCommandBuilder *)setLogsArray:(NSArray *)array {
  resultLogsCommand.logsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (LogsCommandBuilder *)clearLogs {
  resultLogsCommand.logsArray = nil;
  return self;
}
@end

@interface RcpCommand ()
@property (strong) NSString* id;
@property (strong) NSString* cid;
@property SInt64 t;
@end

@implementation RcpCommand

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) _value_ {
  hasId_ = !!_value_;
}
@synthesize id;
- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (BOOL) hasT {
  return !!hasT_;
}
- (void) setHasT:(BOOL) _value_ {
  hasT_ = !!_value_;
}
@synthesize t;
- (instancetype) init {
  if ((self = [super init])) {
    self.id = @"";
    self.cid = @"";
    self.t = 0L;
  }
  return self;
}
static RcpCommand* defaultRcpCommandInstance = nil;
+ (void) initialize {
  if (self == [RcpCommand class]) {
    defaultRcpCommandInstance = [[RcpCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultRcpCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultRcpCommandInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasCid) {
    [output writeString:2 value:self.cid];
  }
  if (self.hasT) {
    [output writeInt64:3 value:self.t];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasId) {
    size_ += computeStringSize(1, self.id);
  }
  if (self.hasCid) {
    size_ += computeStringSize(2, self.cid);
  }
  if (self.hasT) {
    size_ += computeInt64Size(3, self.t);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RcpCommand*) parseFromData:(NSData*) data {
  return (RcpCommand*)[[[RcpCommand builder] mergeFromData:data] build];
}
+ (RcpCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RcpCommand*)[[[RcpCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RcpCommand*) parseFromInputStream:(NSInputStream*) input {
  return (RcpCommand*)[[[RcpCommand builder] mergeFromInputStream:input] build];
}
+ (RcpCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RcpCommand*)[[[RcpCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RcpCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RcpCommand*)[[[RcpCommand builder] mergeFromCodedInputStream:input] build];
}
+ (RcpCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RcpCommand*)[[[RcpCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RcpCommandBuilder*) builder {
  return [[RcpCommandBuilder alloc] init];
}
+ (RcpCommandBuilder*) builderWithPrototype:(RcpCommand*) prototype {
  return [[RcpCommand builder] mergeFrom:prototype];
}
- (RcpCommandBuilder*) builder {
  return [RcpCommand builder];
}
- (RcpCommandBuilder*) toBuilder {
  return [RcpCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"id", self.id];
  }
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  if (self.hasT) {
    [output appendFormat:@"%@%@: %@\n", indent, @"t", [NSNumber numberWithLongLong:self.t]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasId) {
    [dictionary setObject: self.id forKey: @"id"];
  }
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  if (self.hasT) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.t] forKey: @"t"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[RcpCommand class]]) {
    return NO;
  }
  RcpCommand *otherMessage = other;
  return
      self.hasId == otherMessage.hasId &&
      (!self.hasId || [self.id isEqual:otherMessage.id]) &&
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      self.hasT == otherMessage.hasT &&
      (!self.hasT || self.t == otherMessage.t) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasId) {
    hashCode = hashCode * 31 + [self.id hash];
  }
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  if (self.hasT) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.t] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface RcpCommandBuilder()
@property (strong) RcpCommand* resultRcpCommand;
@end

@implementation RcpCommandBuilder
@synthesize resultRcpCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultRcpCommand = [[RcpCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultRcpCommand;
}
- (RcpCommandBuilder*) clear {
  self.resultRcpCommand = [[RcpCommand alloc] init];
  return self;
}
- (RcpCommandBuilder*) clone {
  return [RcpCommand builderWithPrototype:resultRcpCommand];
}
- (RcpCommand*) defaultInstance {
  return [RcpCommand defaultInstance];
}
- (RcpCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RcpCommand*) buildPartial {
  RcpCommand* returnMe = resultRcpCommand;
  self.resultRcpCommand = nil;
  return returnMe;
}
- (RcpCommandBuilder*) mergeFrom:(RcpCommand*) other {
  if (other == [RcpCommand defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  if (other.hasT) {
    [self setT:other.t];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RcpCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RcpCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setCid:[input readString]];
        break;
      }
      case 24: {
        [self setT:[input readInt64]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return resultRcpCommand.hasId;
}
- (NSString*) id {
  return resultRcpCommand.id;
}
- (RcpCommandBuilder*) setId:(NSString*) value {
  resultRcpCommand.hasId = YES;
  resultRcpCommand.id = value;
  return self;
}
- (RcpCommandBuilder*) clearId {
  resultRcpCommand.hasId = NO;
  resultRcpCommand.id = @"";
  return self;
}
- (BOOL) hasCid {
  return resultRcpCommand.hasCid;
}
- (NSString*) cid {
  return resultRcpCommand.cid;
}
- (RcpCommandBuilder*) setCid:(NSString*) value {
  resultRcpCommand.hasCid = YES;
  resultRcpCommand.cid = value;
  return self;
}
- (RcpCommandBuilder*) clearCid {
  resultRcpCommand.hasCid = NO;
  resultRcpCommand.cid = @"";
  return self;
}
- (BOOL) hasT {
  return resultRcpCommand.hasT;
}
- (SInt64) t {
  return resultRcpCommand.t;
}
- (RcpCommandBuilder*) setT:(SInt64) value {
  resultRcpCommand.hasT = YES;
  resultRcpCommand.t = value;
  return self;
}
- (RcpCommandBuilder*) clearT {
  resultRcpCommand.hasT = NO;
  resultRcpCommand.t = 0L;
  return self;
}
@end

@interface ReadCommand ()
@property (strong) NSString* cid;
@end

@implementation ReadCommand

- (BOOL) hasCid {
  return !!hasCid_;
}
- (void) setHasCid:(BOOL) _value_ {
  hasCid_ = !!_value_;
}
@synthesize cid;
- (instancetype) init {
  if ((self = [super init])) {
    self.cid = @"";
  }
  return self;
}
static ReadCommand* defaultReadCommandInstance = nil;
+ (void) initialize {
  if (self == [ReadCommand class]) {
    defaultReadCommandInstance = [[ReadCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultReadCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultReadCommandInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCid) {
    [output writeString:1 value:self.cid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCid) {
    size_ += computeStringSize(1, self.cid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ReadCommand*) parseFromData:(NSData*) data {
  return (ReadCommand*)[[[ReadCommand builder] mergeFromData:data] build];
}
+ (ReadCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReadCommand*)[[[ReadCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (ReadCommand*) parseFromInputStream:(NSInputStream*) input {
  return (ReadCommand*)[[[ReadCommand builder] mergeFromInputStream:input] build];
}
+ (ReadCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReadCommand*)[[[ReadCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReadCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (ReadCommand*)[[[ReadCommand builder] mergeFromCodedInputStream:input] build];
}
+ (ReadCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (ReadCommand*)[[[ReadCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (ReadCommandBuilder*) builder {
  return [[ReadCommandBuilder alloc] init];
}
+ (ReadCommandBuilder*) builderWithPrototype:(ReadCommand*) prototype {
  return [[ReadCommand builder] mergeFrom:prototype];
}
- (ReadCommandBuilder*) builder {
  return [ReadCommand builder];
}
- (ReadCommandBuilder*) toBuilder {
  return [ReadCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cid", self.cid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCid) {
    [dictionary setObject: self.cid forKey: @"cid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[ReadCommand class]]) {
    return NO;
  }
  ReadCommand *otherMessage = other;
  return
      self.hasCid == otherMessage.hasCid &&
      (!self.hasCid || [self.cid isEqual:otherMessage.cid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCid) {
    hashCode = hashCode * 31 + [self.cid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface ReadCommandBuilder()
@property (strong) ReadCommand* resultReadCommand;
@end

@implementation ReadCommandBuilder
@synthesize resultReadCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultReadCommand = [[ReadCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultReadCommand;
}
- (ReadCommandBuilder*) clear {
  self.resultReadCommand = [[ReadCommand alloc] init];
  return self;
}
- (ReadCommandBuilder*) clone {
  return [ReadCommand builderWithPrototype:resultReadCommand];
}
- (ReadCommand*) defaultInstance {
  return [ReadCommand defaultInstance];
}
- (ReadCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (ReadCommand*) buildPartial {
  ReadCommand* returnMe = resultReadCommand;
  self.resultReadCommand = nil;
  return returnMe;
}
- (ReadCommandBuilder*) mergeFrom:(ReadCommand*) other {
  if (other == [ReadCommand defaultInstance]) {
    return self;
  }
  if (other.hasCid) {
    [self setCid:other.cid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (ReadCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (ReadCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setCid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCid {
  return resultReadCommand.hasCid;
}
- (NSString*) cid {
  return resultReadCommand.cid;
}
- (ReadCommandBuilder*) setCid:(NSString*) value {
  resultReadCommand.hasCid = YES;
  resultReadCommand.cid = value;
  return self;
}
- (ReadCommandBuilder*) clearCid {
  resultReadCommand.hasCid = NO;
  resultReadCommand.cid = @"";
  return self;
}
@end

@interface GenericCommand ()
@property CommandType cmd;
@property OpType op;
@property (strong) NSString* appId;
@property (strong) NSString* peerId;
@property SInt32 i;
@property (strong) NSString* installationId;
@property (strong) LoginCommand* loginMessage;
@property (strong) DataCommand* dataMessage;
@property (strong) SessionCommand* sessionMessage;
@property (strong) ErrorCommand* errorMessage;
@property (strong) DirectCommand* directMessage;
@property (strong) AckCommand* ackMessage;
@property (strong) UnreadCommand* unreadMessage;
@property (strong) ReadCommand* readMessage;
@property (strong) RcpCommand* rcpMessage;
@property (strong) LogsCommand* logsMessage;
@property (strong) ConvCommand* convMessage;
@property (strong) RoomCommand* roomMessage;
@end

@implementation GenericCommand

- (BOOL) hasCmd {
  return !!hasCmd_;
}
- (void) setHasCmd:(BOOL) _value_ {
  hasCmd_ = !!_value_;
}
@synthesize cmd;
- (BOOL) hasOp {
  return !!hasOp_;
}
- (void) setHasOp:(BOOL) _value_ {
  hasOp_ = !!_value_;
}
@synthesize op;
- (BOOL) hasAppId {
  return !!hasAppId_;
}
- (void) setHasAppId:(BOOL) _value_ {
  hasAppId_ = !!_value_;
}
@synthesize appId;
- (BOOL) hasPeerId {
  return !!hasPeerId_;
}
- (void) setHasPeerId:(BOOL) _value_ {
  hasPeerId_ = !!_value_;
}
@synthesize peerId;
- (BOOL) hasI {
  return !!hasI_;
}
- (void) setHasI:(BOOL) _value_ {
  hasI_ = !!_value_;
}
@synthesize i;
- (BOOL) hasInstallationId {
  return !!hasInstallationId_;
}
- (void) setHasInstallationId:(BOOL) _value_ {
  hasInstallationId_ = !!_value_;
}
@synthesize installationId;
- (BOOL) hasLoginMessage {
  return !!hasLoginMessage_;
}
- (void) setHasLoginMessage:(BOOL) _value_ {
  hasLoginMessage_ = !!_value_;
}
@synthesize loginMessage;
- (BOOL) hasDataMessage {
  return !!hasDataMessage_;
}
- (void) setHasDataMessage:(BOOL) _value_ {
  hasDataMessage_ = !!_value_;
}
@synthesize dataMessage;
- (BOOL) hasSessionMessage {
  return !!hasSessionMessage_;
}
- (void) setHasSessionMessage:(BOOL) _value_ {
  hasSessionMessage_ = !!_value_;
}
@synthesize sessionMessage;
- (BOOL) hasErrorMessage {
  return !!hasErrorMessage_;
}
- (void) setHasErrorMessage:(BOOL) _value_ {
  hasErrorMessage_ = !!_value_;
}
@synthesize errorMessage;
- (BOOL) hasDirectMessage {
  return !!hasDirectMessage_;
}
- (void) setHasDirectMessage:(BOOL) _value_ {
  hasDirectMessage_ = !!_value_;
}
@synthesize directMessage;
- (BOOL) hasAckMessage {
  return !!hasAckMessage_;
}
- (void) setHasAckMessage:(BOOL) _value_ {
  hasAckMessage_ = !!_value_;
}
@synthesize ackMessage;
- (BOOL) hasUnreadMessage {
  return !!hasUnreadMessage_;
}
- (void) setHasUnreadMessage:(BOOL) _value_ {
  hasUnreadMessage_ = !!_value_;
}
@synthesize unreadMessage;
- (BOOL) hasReadMessage {
  return !!hasReadMessage_;
}
- (void) setHasReadMessage:(BOOL) _value_ {
  hasReadMessage_ = !!_value_;
}
@synthesize readMessage;
- (BOOL) hasRcpMessage {
  return !!hasRcpMessage_;
}
- (void) setHasRcpMessage:(BOOL) _value_ {
  hasRcpMessage_ = !!_value_;
}
@synthesize rcpMessage;
- (BOOL) hasLogsMessage {
  return !!hasLogsMessage_;
}
- (void) setHasLogsMessage:(BOOL) _value_ {
  hasLogsMessage_ = !!_value_;
}
@synthesize logsMessage;
- (BOOL) hasConvMessage {
  return !!hasConvMessage_;
}
- (void) setHasConvMessage:(BOOL) _value_ {
  hasConvMessage_ = !!_value_;
}
@synthesize convMessage;
- (BOOL) hasRoomMessage {
  return !!hasRoomMessage_;
}
- (void) setHasRoomMessage:(BOOL) _value_ {
  hasRoomMessage_ = !!_value_;
}
@synthesize roomMessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.cmd = CommandTypeSession;
    self.op = OpTypeOpen;
    self.appId = @"";
    self.peerId = @"";
    self.i = 0;
    self.installationId = @"";
    self.loginMessage = [LoginCommand defaultInstance];
    self.dataMessage = [DataCommand defaultInstance];
    self.sessionMessage = [SessionCommand defaultInstance];
    self.errorMessage = [ErrorCommand defaultInstance];
    self.directMessage = [DirectCommand defaultInstance];
    self.ackMessage = [AckCommand defaultInstance];
    self.unreadMessage = [UnreadCommand defaultInstance];
    self.readMessage = [ReadCommand defaultInstance];
    self.rcpMessage = [RcpCommand defaultInstance];
    self.logsMessage = [LogsCommand defaultInstance];
    self.convMessage = [ConvCommand defaultInstance];
    self.roomMessage = [RoomCommand defaultInstance];
  }
  return self;
}
static GenericCommand* defaultGenericCommandInstance = nil;
+ (void) initialize {
  if (self == [GenericCommand class]) {
    defaultGenericCommandInstance = [[GenericCommand alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultGenericCommandInstance;
}
- (instancetype) defaultInstance {
  return defaultGenericCommandInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCmd) {
    return NO;
  }
  if (self.hasErrorMessage) {
    if (!self.errorMessage.isInitialized) {
      return NO;
    }
  }
  if (self.hasUnreadMessage) {
    if (!self.unreadMessage.isInitialized) {
      return NO;
    }
  }
  if (self.hasConvMessage) {
    if (!self.convMessage.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCmd) {
    [output writeEnum:1 value:self.cmd];
  }
  if (self.hasOp) {
    [output writeEnum:2 value:self.op];
  }
  if (self.hasAppId) {
    [output writeString:3 value:self.appId];
  }
  if (self.hasPeerId) {
    [output writeString:4 value:self.peerId];
  }
  if (self.hasI) {
    [output writeInt32:5 value:self.i];
  }
  if (self.hasInstallationId) {
    [output writeString:6 value:self.installationId];
  }
  if (self.hasLoginMessage) {
    [output writeMessage:100 value:self.loginMessage];
  }
  if (self.hasDataMessage) {
    [output writeMessage:101 value:self.dataMessage];
  }
  if (self.hasSessionMessage) {
    [output writeMessage:102 value:self.sessionMessage];
  }
  if (self.hasErrorMessage) {
    [output writeMessage:103 value:self.errorMessage];
  }
  if (self.hasDirectMessage) {
    [output writeMessage:104 value:self.directMessage];
  }
  if (self.hasAckMessage) {
    [output writeMessage:105 value:self.ackMessage];
  }
  if (self.hasUnreadMessage) {
    [output writeMessage:106 value:self.unreadMessage];
  }
  if (self.hasReadMessage) {
    [output writeMessage:107 value:self.readMessage];
  }
  if (self.hasRcpMessage) {
    [output writeMessage:108 value:self.rcpMessage];
  }
  if (self.hasLogsMessage) {
    [output writeMessage:109 value:self.logsMessage];
  }
  if (self.hasConvMessage) {
    [output writeMessage:110 value:self.convMessage];
  }
  if (self.hasRoomMessage) {
    [output writeMessage:111 value:self.roomMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCmd) {
    size_ += computeEnumSize(1, self.cmd);
  }
  if (self.hasOp) {
    size_ += computeEnumSize(2, self.op);
  }
  if (self.hasAppId) {
    size_ += computeStringSize(3, self.appId);
  }
  if (self.hasPeerId) {
    size_ += computeStringSize(4, self.peerId);
  }
  if (self.hasI) {
    size_ += computeInt32Size(5, self.i);
  }
  if (self.hasInstallationId) {
    size_ += computeStringSize(6, self.installationId);
  }
  if (self.hasLoginMessage) {
    size_ += computeMessageSize(100, self.loginMessage);
  }
  if (self.hasDataMessage) {
    size_ += computeMessageSize(101, self.dataMessage);
  }
  if (self.hasSessionMessage) {
    size_ += computeMessageSize(102, self.sessionMessage);
  }
  if (self.hasErrorMessage) {
    size_ += computeMessageSize(103, self.errorMessage);
  }
  if (self.hasDirectMessage) {
    size_ += computeMessageSize(104, self.directMessage);
  }
  if (self.hasAckMessage) {
    size_ += computeMessageSize(105, self.ackMessage);
  }
  if (self.hasUnreadMessage) {
    size_ += computeMessageSize(106, self.unreadMessage);
  }
  if (self.hasReadMessage) {
    size_ += computeMessageSize(107, self.readMessage);
  }
  if (self.hasRcpMessage) {
    size_ += computeMessageSize(108, self.rcpMessage);
  }
  if (self.hasLogsMessage) {
    size_ += computeMessageSize(109, self.logsMessage);
  }
  if (self.hasConvMessage) {
    size_ += computeMessageSize(110, self.convMessage);
  }
  if (self.hasRoomMessage) {
    size_ += computeMessageSize(111, self.roomMessage);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GenericCommand*) parseFromData:(NSData*) data {
  return (GenericCommand*)[[[GenericCommand builder] mergeFromData:data] build];
}
+ (GenericCommand*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GenericCommand*)[[[GenericCommand builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (GenericCommand*) parseFromInputStream:(NSInputStream*) input {
  return (GenericCommand*)[[[GenericCommand builder] mergeFromInputStream:input] build];
}
+ (GenericCommand*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GenericCommand*)[[[GenericCommand builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GenericCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (GenericCommand*)[[[GenericCommand builder] mergeFromCodedInputStream:input] build];
}
+ (GenericCommand*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (GenericCommand*)[[[GenericCommand builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (GenericCommandBuilder*) builder {
  return [[GenericCommandBuilder alloc] init];
}
+ (GenericCommandBuilder*) builderWithPrototype:(GenericCommand*) prototype {
  return [[GenericCommand builder] mergeFrom:prototype];
}
- (GenericCommandBuilder*) builder {
  return [GenericCommand builder];
}
- (GenericCommandBuilder*) toBuilder {
  return [GenericCommand builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCmd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cmd", NSStringFromCommandType(self.cmd)];
  }
  if (self.hasOp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"op", NSStringFromOpType(self.op)];
  }
  if (self.hasAppId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appId", self.appId];
  }
  if (self.hasPeerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"peerId", self.peerId];
  }
  if (self.hasI) {
    [output appendFormat:@"%@%@: %@\n", indent, @"i", [NSNumber numberWithInteger:self.i]];
  }
  if (self.hasInstallationId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"installationId", self.installationId];
  }
  if (self.hasLoginMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"loginMessage"];
    [self.loginMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDataMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"dataMessage"];
    [self.dataMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSessionMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"sessionMessage"];
    [self.sessionMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasErrorMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"errorMessage"];
    [self.errorMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDirectMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"directMessage"];
    [self.directMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasAckMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"ackMessage"];
    [self.ackMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasUnreadMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"unreadMessage"];
    [self.unreadMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasReadMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"readMessage"];
    [self.readMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRcpMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"rcpMessage"];
    [self.rcpMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasLogsMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"logsMessage"];
    [self.logsMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasConvMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"convMessage"];
    [self.convMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasRoomMessage) {
    [output appendFormat:@"%@%@ {\n", indent, @"roomMessage"];
    [self.roomMessage writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCmd) {
    [dictionary setObject: @(self.cmd) forKey: @"cmd"];
  }
  if (self.hasOp) {
    [dictionary setObject: @(self.op) forKey: @"op"];
  }
  if (self.hasAppId) {
    [dictionary setObject: self.appId forKey: @"appId"];
  }
  if (self.hasPeerId) {
    [dictionary setObject: self.peerId forKey: @"peerId"];
  }
  if (self.hasI) {
    [dictionary setObject: [NSNumber numberWithInteger:self.i] forKey: @"i"];
  }
  if (self.hasInstallationId) {
    [dictionary setObject: self.installationId forKey: @"installationId"];
  }
  if (self.hasLoginMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.loginMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"loginMessage"];
  }
  if (self.hasDataMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.dataMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"dataMessage"];
  }
  if (self.hasSessionMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.sessionMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"sessionMessage"];
  }
  if (self.hasErrorMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.errorMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"errorMessage"];
  }
  if (self.hasDirectMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.directMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"directMessage"];
  }
  if (self.hasAckMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.ackMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"ackMessage"];
  }
  if (self.hasUnreadMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.unreadMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"unreadMessage"];
  }
  if (self.hasReadMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.readMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"readMessage"];
  }
  if (self.hasRcpMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.rcpMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"rcpMessage"];
  }
  if (self.hasLogsMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.logsMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"logsMessage"];
  }
  if (self.hasConvMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.convMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"convMessage"];
  }
  if (self.hasRoomMessage) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.roomMessage storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"roomMessage"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[GenericCommand class]]) {
    return NO;
  }
  GenericCommand *otherMessage = other;
  return
      self.hasCmd == otherMessage.hasCmd &&
      (!self.hasCmd || self.cmd == otherMessage.cmd) &&
      self.hasOp == otherMessage.hasOp &&
      (!self.hasOp || self.op == otherMessage.op) &&
      self.hasAppId == otherMessage.hasAppId &&
      (!self.hasAppId || [self.appId isEqual:otherMessage.appId]) &&
      self.hasPeerId == otherMessage.hasPeerId &&
      (!self.hasPeerId || [self.peerId isEqual:otherMessage.peerId]) &&
      self.hasI == otherMessage.hasI &&
      (!self.hasI || self.i == otherMessage.i) &&
      self.hasInstallationId == otherMessage.hasInstallationId &&
      (!self.hasInstallationId || [self.installationId isEqual:otherMessage.installationId]) &&
      self.hasLoginMessage == otherMessage.hasLoginMessage &&
      (!self.hasLoginMessage || [self.loginMessage isEqual:otherMessage.loginMessage]) &&
      self.hasDataMessage == otherMessage.hasDataMessage &&
      (!self.hasDataMessage || [self.dataMessage isEqual:otherMessage.dataMessage]) &&
      self.hasSessionMessage == otherMessage.hasSessionMessage &&
      (!self.hasSessionMessage || [self.sessionMessage isEqual:otherMessage.sessionMessage]) &&
      self.hasErrorMessage == otherMessage.hasErrorMessage &&
      (!self.hasErrorMessage || [self.errorMessage isEqual:otherMessage.errorMessage]) &&
      self.hasDirectMessage == otherMessage.hasDirectMessage &&
      (!self.hasDirectMessage || [self.directMessage isEqual:otherMessage.directMessage]) &&
      self.hasAckMessage == otherMessage.hasAckMessage &&
      (!self.hasAckMessage || [self.ackMessage isEqual:otherMessage.ackMessage]) &&
      self.hasUnreadMessage == otherMessage.hasUnreadMessage &&
      (!self.hasUnreadMessage || [self.unreadMessage isEqual:otherMessage.unreadMessage]) &&
      self.hasReadMessage == otherMessage.hasReadMessage &&
      (!self.hasReadMessage || [self.readMessage isEqual:otherMessage.readMessage]) &&
      self.hasRcpMessage == otherMessage.hasRcpMessage &&
      (!self.hasRcpMessage || [self.rcpMessage isEqual:otherMessage.rcpMessage]) &&
      self.hasLogsMessage == otherMessage.hasLogsMessage &&
      (!self.hasLogsMessage || [self.logsMessage isEqual:otherMessage.logsMessage]) &&
      self.hasConvMessage == otherMessage.hasConvMessage &&
      (!self.hasConvMessage || [self.convMessage isEqual:otherMessage.convMessage]) &&
      self.hasRoomMessage == otherMessage.hasRoomMessage &&
      (!self.hasRoomMessage || [self.roomMessage isEqual:otherMessage.roomMessage]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCmd) {
    hashCode = hashCode * 31 + self.cmd;
  }
  if (self.hasOp) {
    hashCode = hashCode * 31 + self.op;
  }
  if (self.hasAppId) {
    hashCode = hashCode * 31 + [self.appId hash];
  }
  if (self.hasPeerId) {
    hashCode = hashCode * 31 + [self.peerId hash];
  }
  if (self.hasI) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.i] hash];
  }
  if (self.hasInstallationId) {
    hashCode = hashCode * 31 + [self.installationId hash];
  }
  if (self.hasLoginMessage) {
    hashCode = hashCode * 31 + [self.loginMessage hash];
  }
  if (self.hasDataMessage) {
    hashCode = hashCode * 31 + [self.dataMessage hash];
  }
  if (self.hasSessionMessage) {
    hashCode = hashCode * 31 + [self.sessionMessage hash];
  }
  if (self.hasErrorMessage) {
    hashCode = hashCode * 31 + [self.errorMessage hash];
  }
  if (self.hasDirectMessage) {
    hashCode = hashCode * 31 + [self.directMessage hash];
  }
  if (self.hasAckMessage) {
    hashCode = hashCode * 31 + [self.ackMessage hash];
  }
  if (self.hasUnreadMessage) {
    hashCode = hashCode * 31 + [self.unreadMessage hash];
  }
  if (self.hasReadMessage) {
    hashCode = hashCode * 31 + [self.readMessage hash];
  }
  if (self.hasRcpMessage) {
    hashCode = hashCode * 31 + [self.rcpMessage hash];
  }
  if (self.hasLogsMessage) {
    hashCode = hashCode * 31 + [self.logsMessage hash];
  }
  if (self.hasConvMessage) {
    hashCode = hashCode * 31 + [self.convMessage hash];
  }
  if (self.hasRoomMessage) {
    hashCode = hashCode * 31 + [self.roomMessage hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface GenericCommandBuilder()
@property (strong) GenericCommand* resultGenericCommand;
@end

@implementation GenericCommandBuilder
@synthesize resultGenericCommand;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultGenericCommand = [[GenericCommand alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultGenericCommand;
}
- (GenericCommandBuilder*) clear {
  self.resultGenericCommand = [[GenericCommand alloc] init];
  return self;
}
- (GenericCommandBuilder*) clone {
  return [GenericCommand builderWithPrototype:resultGenericCommand];
}
- (GenericCommand*) defaultInstance {
  return [GenericCommand defaultInstance];
}
- (GenericCommand*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (GenericCommand*) buildPartial {
  GenericCommand* returnMe = resultGenericCommand;
  self.resultGenericCommand = nil;
  return returnMe;
}
- (GenericCommandBuilder*) mergeFrom:(GenericCommand*) other {
  if (other == [GenericCommand defaultInstance]) {
    return self;
  }
  if (other.hasCmd) {
    [self setCmd:other.cmd];
  }
  if (other.hasOp) {
    [self setOp:other.op];
  }
  if (other.hasAppId) {
    [self setAppId:other.appId];
  }
  if (other.hasPeerId) {
    [self setPeerId:other.peerId];
  }
  if (other.hasI) {
    [self setI:other.i];
  }
  if (other.hasInstallationId) {
    [self setInstallationId:other.installationId];
  }
  if (other.hasLoginMessage) {
    [self mergeLoginMessage:other.loginMessage];
  }
  if (other.hasDataMessage) {
    [self mergeDataMessage:other.dataMessage];
  }
  if (other.hasSessionMessage) {
    [self mergeSessionMessage:other.sessionMessage];
  }
  if (other.hasErrorMessage) {
    [self mergeErrorMessage:other.errorMessage];
  }
  if (other.hasDirectMessage) {
    [self mergeDirectMessage:other.directMessage];
  }
  if (other.hasAckMessage) {
    [self mergeAckMessage:other.ackMessage];
  }
  if (other.hasUnreadMessage) {
    [self mergeUnreadMessage:other.unreadMessage];
  }
  if (other.hasReadMessage) {
    [self mergeReadMessage:other.readMessage];
  }
  if (other.hasRcpMessage) {
    [self mergeRcpMessage:other.rcpMessage];
  }
  if (other.hasLogsMessage) {
    [self mergeLogsMessage:other.logsMessage];
  }
  if (other.hasConvMessage) {
    [self mergeConvMessage:other.convMessage];
  }
  if (other.hasRoomMessage) {
    [self mergeRoomMessage:other.roomMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (GenericCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (GenericCommandBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        CommandType value = (CommandType)[input readEnum];
        if (CommandTypeIsValidValue(value)) {
          [self setCmd:value];
        } else {
          [unknownFields mergeVarintField:1 value:value];
        }
        break;
      }
      case 16: {
        OpType value = (OpType)[input readEnum];
        if (OpTypeIsValidValue(value)) {
          [self setOp:value];
        } else {
          [unknownFields mergeVarintField:2 value:value];
        }
        break;
      }
      case 26: {
        [self setAppId:[input readString]];
        break;
      }
      case 34: {
        [self setPeerId:[input readString]];
        break;
      }
      case 40: {
        [self setI:[input readInt32]];
        break;
      }
      case 50: {
        [self setInstallationId:[input readString]];
        break;
      }
      case 802: {
        LoginCommandBuilder* subBuilder = [LoginCommand builder];
        if (self.hasLoginMessage) {
          [subBuilder mergeFrom:self.loginMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLoginMessage:[subBuilder buildPartial]];
        break;
      }
      case 810: {
        DataCommandBuilder* subBuilder = [DataCommand builder];
        if (self.hasDataMessage) {
          [subBuilder mergeFrom:self.dataMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDataMessage:[subBuilder buildPartial]];
        break;
      }
      case 818: {
        SessionCommandBuilder* subBuilder = [SessionCommand builder];
        if (self.hasSessionMessage) {
          [subBuilder mergeFrom:self.sessionMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setSessionMessage:[subBuilder buildPartial]];
        break;
      }
      case 826: {
        ErrorCommandBuilder* subBuilder = [ErrorCommand builder];
        if (self.hasErrorMessage) {
          [subBuilder mergeFrom:self.errorMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setErrorMessage:[subBuilder buildPartial]];
        break;
      }
      case 834: {
        DirectCommandBuilder* subBuilder = [DirectCommand builder];
        if (self.hasDirectMessage) {
          [subBuilder mergeFrom:self.directMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setDirectMessage:[subBuilder buildPartial]];
        break;
      }
      case 842: {
        AckCommandBuilder* subBuilder = [AckCommand builder];
        if (self.hasAckMessage) {
          [subBuilder mergeFrom:self.ackMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAckMessage:[subBuilder buildPartial]];
        break;
      }
      case 850: {
        UnreadCommandBuilder* subBuilder = [UnreadCommand builder];
        if (self.hasUnreadMessage) {
          [subBuilder mergeFrom:self.unreadMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUnreadMessage:[subBuilder buildPartial]];
        break;
      }
      case 858: {
        ReadCommandBuilder* subBuilder = [ReadCommand builder];
        if (self.hasReadMessage) {
          [subBuilder mergeFrom:self.readMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setReadMessage:[subBuilder buildPartial]];
        break;
      }
      case 866: {
        RcpCommandBuilder* subBuilder = [RcpCommand builder];
        if (self.hasRcpMessage) {
          [subBuilder mergeFrom:self.rcpMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRcpMessage:[subBuilder buildPartial]];
        break;
      }
      case 874: {
        LogsCommandBuilder* subBuilder = [LogsCommand builder];
        if (self.hasLogsMessage) {
          [subBuilder mergeFrom:self.logsMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLogsMessage:[subBuilder buildPartial]];
        break;
      }
      case 882: {
        ConvCommandBuilder* subBuilder = [ConvCommand builder];
        if (self.hasConvMessage) {
          [subBuilder mergeFrom:self.convMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setConvMessage:[subBuilder buildPartial]];
        break;
      }
      case 890: {
        RoomCommandBuilder* subBuilder = [RoomCommand builder];
        if (self.hasRoomMessage) {
          [subBuilder mergeFrom:self.roomMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoomMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCmd {
  return resultGenericCommand.hasCmd;
}
- (CommandType) cmd {
  return resultGenericCommand.cmd;
}
- (GenericCommandBuilder*) setCmd:(CommandType) value {
  resultGenericCommand.hasCmd = YES;
  resultGenericCommand.cmd = value;
  return self;
}
- (GenericCommandBuilder*) clearCmd {
  resultGenericCommand.hasCmd = NO;
  resultGenericCommand.cmd = CommandTypeSession;
  return self;
}
- (BOOL) hasOp {
  return resultGenericCommand.hasOp;
}
- (OpType) op {
  return resultGenericCommand.op;
}
- (GenericCommandBuilder*) setOp:(OpType) value {
  resultGenericCommand.hasOp = YES;
  resultGenericCommand.op = value;
  return self;
}
- (GenericCommandBuilder*) clearOp {
  resultGenericCommand.hasOp = NO;
  resultGenericCommand.op = OpTypeOpen;
  return self;
}
- (BOOL) hasAppId {
  return resultGenericCommand.hasAppId;
}
- (NSString*) appId {
  return resultGenericCommand.appId;
}
- (GenericCommandBuilder*) setAppId:(NSString*) value {
  resultGenericCommand.hasAppId = YES;
  resultGenericCommand.appId = value;
  return self;
}
- (GenericCommandBuilder*) clearAppId {
  resultGenericCommand.hasAppId = NO;
  resultGenericCommand.appId = @"";
  return self;
}
- (BOOL) hasPeerId {
  return resultGenericCommand.hasPeerId;
}
- (NSString*) peerId {
  return resultGenericCommand.peerId;
}
- (GenericCommandBuilder*) setPeerId:(NSString*) value {
  resultGenericCommand.hasPeerId = YES;
  resultGenericCommand.peerId = value;
  return self;
}
- (GenericCommandBuilder*) clearPeerId {
  resultGenericCommand.hasPeerId = NO;
  resultGenericCommand.peerId = @"";
  return self;
}
- (BOOL) hasI {
  return resultGenericCommand.hasI;
}
- (SInt32) i {
  return resultGenericCommand.i;
}
- (GenericCommandBuilder*) setI:(SInt32) value {
  resultGenericCommand.hasI = YES;
  resultGenericCommand.i = value;
  return self;
}
- (GenericCommandBuilder*) clearI {
  resultGenericCommand.hasI = NO;
  resultGenericCommand.i = 0;
  return self;
}
- (BOOL) hasInstallationId {
  return resultGenericCommand.hasInstallationId;
}
- (NSString*) installationId {
  return resultGenericCommand.installationId;
}
- (GenericCommandBuilder*) setInstallationId:(NSString*) value {
  resultGenericCommand.hasInstallationId = YES;
  resultGenericCommand.installationId = value;
  return self;
}
- (GenericCommandBuilder*) clearInstallationId {
  resultGenericCommand.hasInstallationId = NO;
  resultGenericCommand.installationId = @"";
  return self;
}
- (BOOL) hasLoginMessage {
  return resultGenericCommand.hasLoginMessage;
}
- (LoginCommand*) loginMessage {
  return resultGenericCommand.loginMessage;
}
- (GenericCommandBuilder*) setLoginMessage:(LoginCommand*) value {
  resultGenericCommand.hasLoginMessage = YES;
  resultGenericCommand.loginMessage = value;
  return self;
}
- (GenericCommandBuilder*) setLoginMessageBuilder:(LoginCommandBuilder*) builderForValue {
  return [self setLoginMessage:[builderForValue build]];
}
- (GenericCommandBuilder*) mergeLoginMessage:(LoginCommand*) value {
  if (resultGenericCommand.hasLoginMessage &&
      resultGenericCommand.loginMessage != [LoginCommand defaultInstance]) {
    resultGenericCommand.loginMessage =
      [[[LoginCommand builderWithPrototype:resultGenericCommand.loginMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.loginMessage = value;
  }
  resultGenericCommand.hasLoginMessage = YES;
  return self;
}
- (GenericCommandBuilder*) clearLoginMessage {
  resultGenericCommand.hasLoginMessage = NO;
  resultGenericCommand.loginMessage = [LoginCommand defaultInstance];
  return self;
}
- (BOOL) hasDataMessage {
  return resultGenericCommand.hasDataMessage;
}
- (DataCommand*) dataMessage {
  return resultGenericCommand.dataMessage;
}
- (GenericCommandBuilder*) setDataMessage:(DataCommand*) value {
  resultGenericCommand.hasDataMessage = YES;
  resultGenericCommand.dataMessage = value;
  return self;
}
- (GenericCommandBuilder*) setDataMessageBuilder:(DataCommandBuilder*) builderForValue {
  return [self setDataMessage:[builderForValue build]];
}
- (GenericCommandBuilder*) mergeDataMessage:(DataCommand*) value {
  if (resultGenericCommand.hasDataMessage &&
      resultGenericCommand.dataMessage != [DataCommand defaultInstance]) {
    resultGenericCommand.dataMessage =
      [[[DataCommand builderWithPrototype:resultGenericCommand.dataMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.dataMessage = value;
  }
  resultGenericCommand.hasDataMessage = YES;
  return self;
}
- (GenericCommandBuilder*) clearDataMessage {
  resultGenericCommand.hasDataMessage = NO;
  resultGenericCommand.dataMessage = [DataCommand defaultInstance];
  return self;
}
- (BOOL) hasSessionMessage {
  return resultGenericCommand.hasSessionMessage;
}
- (SessionCommand*) sessionMessage {
  return resultGenericCommand.sessionMessage;
}
- (GenericCommandBuilder*) setSessionMessage:(SessionCommand*) value {
  resultGenericCommand.hasSessionMessage = YES;
  resultGenericCommand.sessionMessage = value;
  return self;
}
- (GenericCommandBuilder*) setSessionMessageBuilder:(SessionCommandBuilder*) builderForValue {
  return [self setSessionMessage:[builderForValue build]];
}
- (GenericCommandBuilder*) mergeSessionMessage:(SessionCommand*) value {
  if (resultGenericCommand.hasSessionMessage &&
      resultGenericCommand.sessionMessage != [SessionCommand defaultInstance]) {
    resultGenericCommand.sessionMessage =
      [[[SessionCommand builderWithPrototype:resultGenericCommand.sessionMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.sessionMessage = value;
  }
  resultGenericCommand.hasSessionMessage = YES;
  return self;
}
- (GenericCommandBuilder*) clearSessionMessage {
  resultGenericCommand.hasSessionMessage = NO;
  resultGenericCommand.sessionMessage = [SessionCommand defaultInstance];
  return self;
}
- (BOOL) hasErrorMessage {
  return resultGenericCommand.hasErrorMessage;
}
- (ErrorCommand*) errorMessage {
  return resultGenericCommand.errorMessage;
}
- (GenericCommandBuilder*) setErrorMessage:(ErrorCommand*) value {
  resultGenericCommand.hasErrorMessage = YES;
  resultGenericCommand.errorMessage = value;
  return self;
}
- (GenericCommandBuilder*) setErrorMessageBuilder:(ErrorCommandBuilder*) builderForValue {
  return [self setErrorMessage:[builderForValue build]];
}
- (GenericCommandBuilder*) mergeErrorMessage:(ErrorCommand*) value {
  if (resultGenericCommand.hasErrorMessage &&
      resultGenericCommand.errorMessage != [ErrorCommand defaultInstance]) {
    resultGenericCommand.errorMessage =
      [[[ErrorCommand builderWithPrototype:resultGenericCommand.errorMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.errorMessage = value;
  }
  resultGenericCommand.hasErrorMessage = YES;
  return self;
}
- (GenericCommandBuilder*) clearErrorMessage {
  resultGenericCommand.hasErrorMessage = NO;
  resultGenericCommand.errorMessage = [ErrorCommand defaultInstance];
  return self;
}
- (BOOL) hasDirectMessage {
  return resultGenericCommand.hasDirectMessage;
}
- (DirectCommand*) directMessage {
  return resultGenericCommand.directMessage;
}
- (GenericCommandBuilder*) setDirectMessage:(DirectCommand*) value {
  resultGenericCommand.hasDirectMessage = YES;
  resultGenericCommand.directMessage = value;
  return self;
}
- (GenericCommandBuilder*) setDirectMessageBuilder:(DirectCommandBuilder*) builderForValue {
  return [self setDirectMessage:[builderForValue build]];
}
- (GenericCommandBuilder*) mergeDirectMessage:(DirectCommand*) value {
  if (resultGenericCommand.hasDirectMessage &&
      resultGenericCommand.directMessage != [DirectCommand defaultInstance]) {
    resultGenericCommand.directMessage =
      [[[DirectCommand builderWithPrototype:resultGenericCommand.directMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.directMessage = value;
  }
  resultGenericCommand.hasDirectMessage = YES;
  return self;
}
- (GenericCommandBuilder*) clearDirectMessage {
  resultGenericCommand.hasDirectMessage = NO;
  resultGenericCommand.directMessage = [DirectCommand defaultInstance];
  return self;
}
- (BOOL) hasAckMessage {
  return resultGenericCommand.hasAckMessage;
}
- (AckCommand*) ackMessage {
  return resultGenericCommand.ackMessage;
}
- (GenericCommandBuilder*) setAckMessage:(AckCommand*) value {
  resultGenericCommand.hasAckMessage = YES;
  resultGenericCommand.ackMessage = value;
  return self;
}
- (GenericCommandBuilder*) setAckMessageBuilder:(AckCommandBuilder*) builderForValue {
  return [self setAckMessage:[builderForValue build]];
}
- (GenericCommandBuilder*) mergeAckMessage:(AckCommand*) value {
  if (resultGenericCommand.hasAckMessage &&
      resultGenericCommand.ackMessage != [AckCommand defaultInstance]) {
    resultGenericCommand.ackMessage =
      [[[AckCommand builderWithPrototype:resultGenericCommand.ackMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.ackMessage = value;
  }
  resultGenericCommand.hasAckMessage = YES;
  return self;
}
- (GenericCommandBuilder*) clearAckMessage {
  resultGenericCommand.hasAckMessage = NO;
  resultGenericCommand.ackMessage = [AckCommand defaultInstance];
  return self;
}
- (BOOL) hasUnreadMessage {
  return resultGenericCommand.hasUnreadMessage;
}
- (UnreadCommand*) unreadMessage {
  return resultGenericCommand.unreadMessage;
}
- (GenericCommandBuilder*) setUnreadMessage:(UnreadCommand*) value {
  resultGenericCommand.hasUnreadMessage = YES;
  resultGenericCommand.unreadMessage = value;
  return self;
}
- (GenericCommandBuilder*) setUnreadMessageBuilder:(UnreadCommandBuilder*) builderForValue {
  return [self setUnreadMessage:[builderForValue build]];
}
- (GenericCommandBuilder*) mergeUnreadMessage:(UnreadCommand*) value {
  if (resultGenericCommand.hasUnreadMessage &&
      resultGenericCommand.unreadMessage != [UnreadCommand defaultInstance]) {
    resultGenericCommand.unreadMessage =
      [[[UnreadCommand builderWithPrototype:resultGenericCommand.unreadMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.unreadMessage = value;
  }
  resultGenericCommand.hasUnreadMessage = YES;
  return self;
}
- (GenericCommandBuilder*) clearUnreadMessage {
  resultGenericCommand.hasUnreadMessage = NO;
  resultGenericCommand.unreadMessage = [UnreadCommand defaultInstance];
  return self;
}
- (BOOL) hasReadMessage {
  return resultGenericCommand.hasReadMessage;
}
- (ReadCommand*) readMessage {
  return resultGenericCommand.readMessage;
}
- (GenericCommandBuilder*) setReadMessage:(ReadCommand*) value {
  resultGenericCommand.hasReadMessage = YES;
  resultGenericCommand.readMessage = value;
  return self;
}
- (GenericCommandBuilder*) setReadMessageBuilder:(ReadCommandBuilder*) builderForValue {
  return [self setReadMessage:[builderForValue build]];
}
- (GenericCommandBuilder*) mergeReadMessage:(ReadCommand*) value {
  if (resultGenericCommand.hasReadMessage &&
      resultGenericCommand.readMessage != [ReadCommand defaultInstance]) {
    resultGenericCommand.readMessage =
      [[[ReadCommand builderWithPrototype:resultGenericCommand.readMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.readMessage = value;
  }
  resultGenericCommand.hasReadMessage = YES;
  return self;
}
- (GenericCommandBuilder*) clearReadMessage {
  resultGenericCommand.hasReadMessage = NO;
  resultGenericCommand.readMessage = [ReadCommand defaultInstance];
  return self;
}
- (BOOL) hasRcpMessage {
  return resultGenericCommand.hasRcpMessage;
}
- (RcpCommand*) rcpMessage {
  return resultGenericCommand.rcpMessage;
}
- (GenericCommandBuilder*) setRcpMessage:(RcpCommand*) value {
  resultGenericCommand.hasRcpMessage = YES;
  resultGenericCommand.rcpMessage = value;
  return self;
}
- (GenericCommandBuilder*) setRcpMessageBuilder:(RcpCommandBuilder*) builderForValue {
  return [self setRcpMessage:[builderForValue build]];
}
- (GenericCommandBuilder*) mergeRcpMessage:(RcpCommand*) value {
  if (resultGenericCommand.hasRcpMessage &&
      resultGenericCommand.rcpMessage != [RcpCommand defaultInstance]) {
    resultGenericCommand.rcpMessage =
      [[[RcpCommand builderWithPrototype:resultGenericCommand.rcpMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.rcpMessage = value;
  }
  resultGenericCommand.hasRcpMessage = YES;
  return self;
}
- (GenericCommandBuilder*) clearRcpMessage {
  resultGenericCommand.hasRcpMessage = NO;
  resultGenericCommand.rcpMessage = [RcpCommand defaultInstance];
  return self;
}
- (BOOL) hasLogsMessage {
  return resultGenericCommand.hasLogsMessage;
}
- (LogsCommand*) logsMessage {
  return resultGenericCommand.logsMessage;
}
- (GenericCommandBuilder*) setLogsMessage:(LogsCommand*) value {
  resultGenericCommand.hasLogsMessage = YES;
  resultGenericCommand.logsMessage = value;
  return self;
}
- (GenericCommandBuilder*) setLogsMessageBuilder:(LogsCommandBuilder*) builderForValue {
  return [self setLogsMessage:[builderForValue build]];
}
- (GenericCommandBuilder*) mergeLogsMessage:(LogsCommand*) value {
  if (resultGenericCommand.hasLogsMessage &&
      resultGenericCommand.logsMessage != [LogsCommand defaultInstance]) {
    resultGenericCommand.logsMessage =
      [[[LogsCommand builderWithPrototype:resultGenericCommand.logsMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.logsMessage = value;
  }
  resultGenericCommand.hasLogsMessage = YES;
  return self;
}
- (GenericCommandBuilder*) clearLogsMessage {
  resultGenericCommand.hasLogsMessage = NO;
  resultGenericCommand.logsMessage = [LogsCommand defaultInstance];
  return self;
}
- (BOOL) hasConvMessage {
  return resultGenericCommand.hasConvMessage;
}
- (ConvCommand*) convMessage {
  return resultGenericCommand.convMessage;
}
- (GenericCommandBuilder*) setConvMessage:(ConvCommand*) value {
  resultGenericCommand.hasConvMessage = YES;
  resultGenericCommand.convMessage = value;
  return self;
}
- (GenericCommandBuilder*) setConvMessageBuilder:(ConvCommandBuilder*) builderForValue {
  return [self setConvMessage:[builderForValue build]];
}
- (GenericCommandBuilder*) mergeConvMessage:(ConvCommand*) value {
  if (resultGenericCommand.hasConvMessage &&
      resultGenericCommand.convMessage != [ConvCommand defaultInstance]) {
    resultGenericCommand.convMessage =
      [[[ConvCommand builderWithPrototype:resultGenericCommand.convMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.convMessage = value;
  }
  resultGenericCommand.hasConvMessage = YES;
  return self;
}
- (GenericCommandBuilder*) clearConvMessage {
  resultGenericCommand.hasConvMessage = NO;
  resultGenericCommand.convMessage = [ConvCommand defaultInstance];
  return self;
}
- (BOOL) hasRoomMessage {
  return resultGenericCommand.hasRoomMessage;
}
- (RoomCommand*) roomMessage {
  return resultGenericCommand.roomMessage;
}
- (GenericCommandBuilder*) setRoomMessage:(RoomCommand*) value {
  resultGenericCommand.hasRoomMessage = YES;
  resultGenericCommand.roomMessage = value;
  return self;
}
- (GenericCommandBuilder*) setRoomMessageBuilder:(RoomCommandBuilder*) builderForValue {
  return [self setRoomMessage:[builderForValue build]];
}
- (GenericCommandBuilder*) mergeRoomMessage:(RoomCommand*) value {
  if (resultGenericCommand.hasRoomMessage &&
      resultGenericCommand.roomMessage != [RoomCommand defaultInstance]) {
    resultGenericCommand.roomMessage =
      [[[RoomCommand builderWithPrototype:resultGenericCommand.roomMessage] mergeFrom:value] buildPartial];
  } else {
    resultGenericCommand.roomMessage = value;
  }
  resultGenericCommand.hasRoomMessage = YES;
  return self;
}
- (GenericCommandBuilder*) clearRoomMessage {
  resultGenericCommand.hasRoomMessage = NO;
  resultGenericCommand.roomMessage = [RoomCommand defaultInstance];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
